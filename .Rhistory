all_cleaned$stage[which(all_cleaned$stage == "Early Oligocene (Tinguirirican)")] <- "Tinguirirican"
all_cleaned$stage[which(all_cleaned$stage == "Late Pleistocene (Lujanian)")] <- "Lujanian"
all_cleaned$stage[which(all_cleaned$stage == "Upper Miocene - Chasicoan" )] <- "Chasicoan"
all_cleaned$stage[which(all_cleaned$stage == "Tinguirirican o Deseadan" )] <- "Tinguirirican-Deseadan"
#PINTURAN TO CHECK
all_cleaned$stage[which(all_cleaned$stage == "Langhian-Serravallian (Laventan-Colloncuran)" )] <- "Laventan-Colloncuran"
all_cleaned$stage[which(all_cleaned$stage == "Pinturense (early Miocene)")] <- "Pinturan"
all_cleaned$stage[which(all_cleaned$stage == "Burdigalian (Colhuehuapian)")] <- "Colhuehuapian"
all_cleaned$stage[which(all_cleaned$stage == "Burdigalian-Langhian (Friasian)")] <- "Friasian"
all_cleaned$stage[which(all_cleaned$stage == "Late Pleistocene-Late Holocene (Lujanian-Platan)")] <- "Lujanian-Platan"
all_cleaned$stage[which(all_cleaned$stage == "Middle Pleistocene (Bonaerian)")] <- "Bonaerian"
all_cleaned$stage[which(all_cleaned$stage == "Late Pleistocene-Late Holocene  (Lujanian-Platan)")] <- "Lujanian-Platan"
all_cleaned$stage[which(all_cleaned$stage == "Tortonian (Huayquerian)")] <- "Huayquerian"
all_cleaned$stage[which(all_cleaned$stage == "Late Miocene (Huayquerian)")] <- "Huayquerian"
all_cleaned$stage[which(all_cleaned$stage == "Deseadan-Tinguirirican?")] <- "Deseadan-Tinguirirican"
all_cleaned$stage[which(all_cleaned$stage == "Priabonian (~Tinguirirican)")] <- "Tinguirirican"
all_cleaned$stage[which(all_cleaned$stage == "Ypresian (Late Early Eocene)")] <- "Ypresian"
all_cleaned$stage[which(all_cleaned$stage == "Early Chapadmalan")] <- "Chapadmalan"
all_cleaned$stage[which(all_cleaned$stage == "Zanclean (~Montehermosan)")] <- "Montehermosan"
all_cleaned$stage[which(all_cleaned$stage == "Late Pleistocene (Lujanian?)")] <- "Lujanian"
all_cleaned$stage[which(all_cleaned$stage == "Holocene-Lujanian?")] <- "Lujanian"
all_cleaned$stage[which(all_cleaned$stage == "Piacenzian (~Chapadmalan)")] <- "Chapadmalan"
all_cleaned$stage[which(all_cleaned$stage == "Casamayoran (Vacan)")] <- "Vacan"
all_cleaned$stage[which(all_cleaned$stage == "Bartonian (~Mustersan)")] <- "Mustersan"
all_cleaned$stage[which(all_cleaned$stage == "Pliocene (?)")] <- "Pliocene"
all_cleaned$stage[which(all_cleaned$stage == "Late Miocene (Chasicoan-Huayquerian)")] <- "Chasicoan-Huayquerian"
all_cleaned$stage[which(all_cleaned$stage == "Late Miocene (Huayquerian?)")] <- "Huayquerian"
all_cleaned$stage[which(all_cleaned$stage == "Early Chasicoan")] <- "Chasicoan"
all_cleaned$stage[which(all_cleaned$stage == "Late Pliocene (Chapadmalan?)")] <- "Chapadmalan"
all_cleaned$stage[which(all_cleaned$stage == "Montehermosan-Chapadmalan (??)")] <- "Montehermosan-Chapadmalan"
all_cleaned$stage[which(all_cleaned$stage == "Rupelian (Tinguirirican?)")] <- "Tinguirirican"
all_cleaned$stage[which(all_cleaned$stage == "~Tinguirirican-Mustersan")] <- "Mustersan-Tinguirirican"
all_cleaned$stage[which(all_cleaned$stage == "Late Eocene (Tinguirirican?)")] <- "Tinguirirican"
all_cleaned$stage[which(all_cleaned$stage == "Lutetian (~Vacan)")] <- "Vacan"
all_cleaned$stage[which(all_cleaned$stage == "Middle Pliocene (Chapadmalan?)")] <- "Chapadmalan"
all_cleaned$stage[which(all_cleaned$stage == "Serravallian (Laventan)")] <- "Laventan"
all_cleaned$stage[which(all_cleaned$stage == "Marplatan?")] <- "Marplatan"
all_cleaned$stage[which(all_cleaned$stage == "Priabonian (Mustersan?)")] <- "Mustersan"
all_cleaned$stage[which(all_cleaned$stage == "Priabonian (Mustersan?)")] <- "Mustersan"
all_cleaned$stage[which(all_cleaned$stage == "Casamayoran")] <- "Riochan-Barrancan"
all_cleaned$stage[which(all_cleaned$stage == "Bartonian (Barrancan?)")] <- "Barrancan"
all_cleaned$stage[which(all_cleaned$stage == "Bartonian-Priabonian  (Mustersan?)")] <- "Mustersan"
all_cleaned$stage[which(all_cleaned$stage == "Middle Eocene (Mustersan?)")] <- "Mustersan"
all_cleaned$stage[which(all_cleaned$stage == "Lutetian (Itaboraian?)")] <- "Itaboraian"
all_cleaned$stage[which(all_cleaned$stage == "Zanclean (Montehermosan?)")] <- "Montehermosan"
all_cleaned$stage[which(all_cleaned$stage == "Piacenzian (Marplatan?)")] <- "Marplatan"
all_cleaned$stage[which(all_cleaned$stage == "Ypresian-Lutetian (~Riochican?)")] <- "Riochican"
all_cleaned$stage[which(all_cleaned$stage == "Lutetian (Sapoan?)")] <- "Sapoan"
all_cleaned$stage[which(all_cleaned$stage == "Lutetian-Bartonian (Sapoan?)")] <- "Sapoan"
all_cleaned$stage[which(all_cleaned$stage == "Holocene (Platan?)")] <- "Platan"
all_cleaned$stage[which(all_cleaned$stage == "Late Holocene (Platan?)")] <- "Platan"
all_cleaned$stage[which(all_cleaned$stage == "Late Pliocene (Marplatan?)")] <- "Marplatan"
all_cleaned$stage[which(all_cleaned$stage == "PLiocene")] <- "Pliocene"
all_cleaned$stage[which(all_cleaned$stage == "Middle Miocene (Laventan?)")] <- "Laventan"
all_cleaned$stage[which(all_cleaned$stage == "Holocene (Platan)")] <- "Platan"
all_cleaned$stage[which(all_cleaned$stage == "Middle Pleistocene (Bonaerian?)")] <- "Bonaerian"
all_cleaned$stage[which(all_cleaned$stage == "Platan-Lujanian")] <- "Lujanian-Platan"
all_cleaned$stage[which(all_cleaned$stage == "Lujanian?")] <- "Lujanian"
all_cleaned$stage[which(all_cleaned$stage == "Pleistocene (Lujanian?)")] <- "Lujanian"
all_cleaned$stage[which(all_cleaned$stage == "Late Pliocene-Early Pleistocene (Marplatan?)")] <- "Marplatan"
all_cleaned$stage[which(all_cleaned$stage == "Bonaerian - Ensenadan")] <- "Ensenadan-Bonaerian"
all_cleaned$stage[which(all_cleaned$stage == "Zanclean (Montehermosan)")] <- "Montehermosan"
all_cleaned$stage[which(all_cleaned$stage == "Late Pleistocene?")] <- "Pleistocene"
all_cleaned$stage[which(all_cleaned$stage == "Ensenadan?")] <- "Ensenadan"
all_cleaned$stage[which(all_cleaned$stage == "Late Pleistocene-Holocene?")] <- "Late Pleistocene-Holocene"
all_cleaned$stage[which(all_cleaned$stage == "Chapadmalan?")] <- "Chapadmalan"
all_cleaned$stage[which(all_cleaned$stage == "Early Pleistocene (Ensenadan?)")] <- "Ensenadan"
all_cleaned$stage[which(all_cleaned$stage == "Late Pliocene (Uquian-Chapadmalan)")] <- "Chapadmalan-Marplatan"
all_cleaned$stage[which(all_cleaned$stage == "Chasicoan - Mayoan")] <- "Maoyan-Chasicoan"
all_cleaned$stage[which(all_cleaned$stage == "Late Pliocene (Chapadmalan)")] <- "Chapadmalan"
all_cleaned$stage[which(all_cleaned$stage == "Early Pliocene (Montehermosan)")] <- "Montehermosan"
all_cleaned$stage[which(all_cleaned$stage == "Late Pliocene (Chapadmalalian)")] <- "Chapadmalan"
all_cleaned$stage[which(all_cleaned$stage == "Calabrian (Ensenadan)")] <- "Ensenadan"
all_cleaned$stage[which(all_cleaned$stage == "Late Miocene (Chasicoan?)")] <- "Chasicoan"
all_cleaned$stage[which(all_cleaned$stage == "Bonaerian?")] <- "Bonaerian"
all_cleaned$stage[which(all_cleaned$stage == "Langhian (Colloncuran?)")] <- "Colloncuran"
all_cleaned$stage[which(all_cleaned$stage == "middle Late Miocene")] <- "Santacrucian"
all_cleaned$stage[which(all_cleaned$stage == "Burdigalian (Santacrucian-Colhuehuapian?)")] <- "Colhuehuapian-Santacrucian"
all_cleaned$stage[which(all_cleaned$stage == "Late Miocene - Early Pliocene (Montehermosan-Huayquerian?)")] <- "Huayquerian-Montehermosan"
all_cleaned$stage[which(all_cleaned$stage == "Lujanian-Bonaerian")] <- "Bonaerian-Lujanian"
all_cleaned$stage[which(all_cleaned$stage == "Zanclean (Chapadmalan-Montehermosan)")] <- "Montehermosan-Chapadmalan"
all_cleaned$stage[which(all_cleaned$stage == "Huayquerian?")] <- "Huayquerian"
all_cleaned$stage[which(all_cleaned$stage == "Pleistocene?")] <- "Early Pleistocene-Late Pleistocene"
all_cleaned$stage[which(all_cleaned$stage == "Friasian-Santacrucian")] <- "Santacrucian-Friasian"
all_cleaned$stage[which(all_cleaned$stage == "Riochan-Barrancan")] <- "Riochican-Barrancan"
all_cleaned$stage[which(all_cleaned$stage == "Huayquerian-Chapadmalan?")] <- "Huayquerian-Chapadmalan"
all_cleaned$stage[which(all_cleaned$stage == "Huayquerian-Chasicoan?")] <- "Huayquerian-Chasicoan"
all_cleaned$stage[which(all_cleaned$stage == "Uquian (=Marplatan?)")] <- "Marplatan"
all_cleaned$stage[which(all_cleaned$stage == "Maoyan-Chasicoan")] <- "Mayoan-Chasicoan"
all_cleaned$stage[which(all_cleaned$stage == "Huayquerian-Laventan?")] <- "Laventan-Huayquerian"
all_cleaned$stage[which(all_cleaned$stage == "Tortonian (Huayquerian-Chasicoan-Mayoan?)")] <- "Mayoan-Huayquerian"
all_cleaned$stage[which(all_cleaned$stage == "Huayquerian-Mayoan?")] <- "Mayoan-Huayquerian"
all_cleaned$stage[which(all_cleaned$stage == "Colloncuran?")] <- "Colloncuran"
all_cleaned$stage[which(all_cleaned$stage == "Montehermosan?")] <- "Montehermosan"
all_cleaned$stage[which(all_cleaned$stage == "Chapadmalan-Montehermosan")] <- "Montehermosan-Chapadmalan"
all_cleaned$stage[which(all_cleaned$stage == "Barrancan-Vacan")] <- "Vacan-Barrancan"
all_cleaned$stage[which(all_cleaned$stage == "Colloncuran-laventan")] <- "Colloncuran-Laventan"
all_cleaned$stage[which(all_cleaned$stage == "late Holocene")] <- "Late Holocene"
all_cleaned$stage[which(all_cleaned$stage == "Ensenadan -  Lujanian")] <- "Ensenadan-Lujanian"
all_cleaned$stage[which(all_cleaned$stage == "Late Pleistocene - Early Holocene")] <- "Late Pleistocene-Early Holocene"
all_cleaned$stage[which(all_cleaned$stage == "Priabonian - Rupelian")] <- "Priabonian-Rupelian"
all_cleaned$stage[which(all_cleaned$stage == "Danian - Selandian")] <- "Danian-Selandian"
all_cleaned$stage[which(all_cleaned$stage == "Tinguirirican - Deseadan")] <- "Tinguirirican-Deseadan"
all_cleaned$stage[which(all_cleaned$stage == "Huayquerian - Montehermosan")] <- "Huayquerian-Montehermosan"
all_cleaned$stage[which(all_cleaned$stage == "Late Miocene - Early Pliocene")] <- "Late Miocene-Early Pliocene"
all_cleaned$stage[which(all_cleaned$stage == "Ypresian - Lutetian")] <- "Ypresian-Lutetian"
all_cleaned$stage[which(all_cleaned$stage == "Montehermosan - Chapadmalan")] <- "Montehermosan-Chapadmalan"
all_cleaned$stage[which(all_cleaned$stage == "Huayquerian - Chapadmalan")] <- "Huayquerian-Chapadmalan"
all_cleaned$stage[which(all_cleaned$stage == "Ensenadan - Lujanian")] <- "Ensenadan-Lujanian"
all_cleaned$stage[which(all_cleaned$stage == "Middle Pleistocene - Late Holocene")] <- "Middle Pleistocene-Late Holocene"
all_cleaned$stage[which(all_cleaned$stage == "Middle-Late Paleocene")] <- "Middle Paleocene-Late Paleocene"
all_cleaned$stage[which(all_cleaned$stage == "Middle-Late Miocene")] <- "Middle Miocene-Late Miocene"
all_cleaned$stage[which(all_cleaned$stage %in% c("\"Pinturan\"",
"\"Pinturense\" (early Miocene)"))] <- "Early Miocene"
all_cleaned$stage[which(all_cleaned$stage == "\"Pleistocene\"")] <- "Pleistocene"
SALMA <- read_xlsx('./data_2023/time_bins/SALMA.xlsx')
ctr_min <- 0
ctr_max <- 0
for(stg in unique(all_cleaned$stage)){
#choose ref if in SALMA
hyp_spl <- strsplit(stg, split = "-")[[1]]
if(length(hyp_spl) > 1){
if((hyp_spl[1] %in% SALMA$interval_name == FALSE)){
next
}
else if((hyp_spl[2] %in% SALMA$interval_name == FALSE)){
next
}
else{
ref_min <- SALMA$min_ma[which(SALMA$interval_name == hyp_spl[2])]
ref_max <- SALMA$max_ma[which(SALMA$interval_name == hyp_spl[1])]
}
}
else{
if(stg %in% SALMA$interval_name == FALSE){
next
}
else{
ref_min <- SALMA$min_ma[which(SALMA$interval_name == stg)]
ref_max <- SALMA$max_ma[which(SALMA$interval_name == stg)]
}
}
#loop across occurrences associated to stg
for(i in which(all_cleaned$stage == stg)){
if(ref_min > all_cleaned$min_ma[i]){
all_cleaned$min_ma[i] <- ref_min
ctr_min <- ctr_min + 1
}
if(ref_max < all_cleaned$max_ma[i]){
all_cleaned$max_ma[i] <- ref_max
ctr_max <- ctr_max + 1
}
}
}
#add New taxa
#EOT
new_tax <- read_xlsx("../../DATA/inventary_newly_added_EOT.xlsx")
new_tax$authorizer <- NA
new_tax$status <- "extinct"
new_tax$gen_lvl_status <- "extinct"
new_tax <- new_tax[, colnames(all_cleaned)]
#bind
all_cleaned <- rbind.data.frame(all_cleaned, new_tax)
all_cleaned <- all_cleaned %>% arrange(order, family, genus, accepted_name, cc)
#save
saveRDS(all_cleaned, "./data_2023/SPECIES_LISTS/3-Fully_cleaned_SALMA_kept.RDS")
################################################################################
# Name: 1-Time_matching.R
# Author: Lucas Buffan
# Date: 2023-12-11
# Aim: Script for occurrence preprocessing and time matching to their
# corresponding stage
################################################################################
library(dplyr)
library(palaeoverse)
source("./R/Updated_Pipeline/1b_Matching_functions.R")
## A bit of preprocessing ------------------------------------------------------
raw <- read.csv("./data_2023/SPECIES_LISTS/1-Raw_Cnz_SA_Mammals.csv", na.strings = "")
L1 <- nrow(raw)
#exclude marine taxa
raw <- raw %>% filter(!((order %in% c("Cetacea", "Sirenia")) |
(family %in% c("Phocidae", "Otariidae"))))
message(paste0("Discarded ", (L1-nrow(raw)), " marine occurrences."))
#exclude occurrences with age range >= 20My
range <- sapply(X = 1:nrow(raw), FUN = function(x){return((raw$max_ma[x]-raw$min_ma[x]))})
raw <- raw[-which(range >= 20),]
#assign a period and an epoch to the occurrences
cnz_periods <- time_bins(interval = "Cenozoic", rank = "period")
cnz_epochs <- time_bins(interval = "Cenozoic", rank = "epoch")
binning_period <- bin_time(occdf = data.frame(max_ma = raw$max_ma,
min_ma = raw$min_ma),
bins = cnz_periods,
method = "majority")
binning_epochs <- bin_time(occdf = data.frame(max_ma = raw$max_ma,
min_ma = raw$min_ma),
bins = cnz_epochs,
method = "majority")
raw$period <- sapply(X = binning_period$bin_assignment,
FUN = function(x){return(cnz_periods$interval_name[which(cnz_periods$bin == x)])})
raw$epoch <- sapply(X = binning_epochs$bin_assignment,
FUN = function(x){return(cnz_epochs$interval_name[which(cnz_epochs$bin == x)])})
raw$stage <- NA
## Matching with Tarquini et al. (2022) ----------------------------------------
tarq <- read.csv("../../Tarquini_etal_2022_SI/Full_table_Tarquini_etal_2022.csv")
#Separate species names with an underscore (to fit with Tarq)
raw$accepted_name <- sapply(X = raw$accepted_name,
FUN = underscore)
#Add "locality" and "formation" columns to our dataset
raw[, c("locality", "formation")] <- NA
#Add publication year
raw$pub_year <- sapply(X = raw$primary_reference, FUN = process_ref)
#Proper matching
ctr <- 0
for(i in 1:nrow(tarq)){
in_our_ds <- which((raw$accepted_name == tarq$Taxon_name[i]) & #same name
(raw$cc == tarq$Co[i]) & #same country
(raw$state == tarq$State[i]) & #same state
(raw$pub_year == process_ref(tarq$Reference[i]))) #same reference year
if(length(in_our_ds) > 0){
raw[in_our_ds, c("min_ma", "max_ma", "locality", "formation", "stage")] <- tarq[i, c("MinAge", "MaxAge", "Locality", "Formation..mb.", "Age")]
ctr <- ctr + 1
}
}
message(paste0("Found ", ctr, " occurrences in common with Tarquini et al. (2022) published data."))
## Match the rest with boundaries of the given early/late intervals ------------
unmatched <- which(is.na(raw$stage)) #if the `stage` column hasn't been filled, the row hasn't been matched. We therefore look for columns with similar features that have been matched
#add early-late age to stage column, for those who are not in Tarquini's ds
for(remaining in unmatched){ #not in Tarquini, according to our criteria
raw$locality[remaining] <- raw$county[remaining]
if(is.na(raw$late_interval[remaining]) == FALSE){
raw$stage[remaining] <- paste(raw$early_interval[remaining],
raw$late_interval[remaining],
sep = "-")
}
else{
raw$stage[remaining] <- raw$early_interval[remaining]
}
}
#stage adjustment
raw$stage[which(raw$stage == "Recent")] <- "Holocene"
raw$stage[which(raw$stage == "Quaternary")] <- "Pleistocene-Holocene"
raw$stage[which(raw$stage %in% c("Late Pleistocene-Holocene", "Late Pleistocene - Holocene"))] <- "Late Pleistocene-Late Holocene"
raw$stage[which(raw$stage == "Pliocene-Middle Pleistocene")] <- "Early Pliocene-Middle Pleistocene"
raw$stage[which(raw$stage == "middle Pliocene")] <- "Middle Pliocene"
raw$stage[which(raw$stage == "Montehermosoan")] <- "Montehermosan"
raw$stage[which(raw$stage == "Chapadmalalan")] <- "Chapadmalan"
raw$stage[which(raw$stage == "Chapadmalalan-Ensenadan")] <- "Chapadmalan-Ensenadan"
raw$stage[which(raw$stage == "lower “Huayquerian”")] <- "Huayquerian"
raw$stage[which(raw$stage == "upper “Huayquerian”")] <- "Huayquerian"
raw$stage[which(raw$stage == "Divisaderan")] <- "Middle Eocene"
raw$stage[which(raw$stage == "Casamayoran")] <- "Middle Eocene"
raw$stage[which(raw$stage == "Ypresian - Lutetian")] <- "Ypresian-Lutetian"
raw$stage[which(raw$stage == "Ensenadan - Lujanian")] <- "Ensenadan-Lujanian"
raw$stage[which(raw$stage == "Danian - Selandian")] <- "Danian-Selandian"
raw$stage[which(raw$stage == "Casamayoran")] <- "Riochan-Barrancan"
raw$stage[which(raw$stage == "Casamayoran-Mustersan")] <- "Riochan-Mustersan"
raw$stage[which(raw$stage == "Tinguirirican - Deseadan")] <- "Tinguirirican-Deseadan"
raw$stage[which(raw$stage %in% c("Montehermosan - Chapadmalalan", "Montehermosan-Chapadmalalan"))] <- "Montehermosan-Chapadmalan"
raw$stage[which(raw$stage == "Middle - Late Miocene")] <- "Middle Miocene-Late Miocene"
raw$stage[which(raw$stage == "Late Pleistocene-Holocene")] <- "Late Pleistocene-Holocene"
raw$stage[which(raw$stage == "Huayquerian - Chapadmalalan")] <- "Huayquerian-Chapadmalan"
raw$stage[which(raw$stage == "Late Pleistocene - Early Holocene")] <- "Late Pleistocene-Early Holocene"
raw$stage[which(raw$stage == "Middle Pleistocene - Late Holocene")] <- "Middle Pleistocene-Late Holocene"
raw$stage[which(raw$stage == "Late Miocene-Early Pliocene")] <- "Late Miocene-Early Pliocene"
raw$stage[which(raw$stage == "Riochan-Mustersan")] <- "Riochican-Mustersan"
raw$stage[which(raw$stage == "Ensenadan -  Lujanian")] <- "Ensenadan-Lujanian"
raw$stage[which(raw$stage == "Priabonian - Rupelian")] <- "Priabonian-Rupelian"
raw$stage[which(raw$stage == "Bonaerian - Ensenadan")] <- "Bonaerian-Ensenadan"
raw$stage[which(raw$stage == "Bonaerian - Lujanian")] <- "Bonaerian-Lujanian"
raw$stage[which(raw$stage %in% c("Barran", "Vorohuean", "Sanandresian", "Vorohuean - Sanandresian"))] <- "Marplatan"
#time bins
SALMA <- read_xlsx('./data_2023/time_bins/SALMA.xlsx')
sub_epochs <- read_xlsx("./data_2023/time_bins/EarlyMidLate_epochs.xlsx")
ICC <- time_bins("Cenozoic")
#hybrid time bins dataset
bins <- rbind.data.frame(SALMA[, c("interval_name", "min_ma", "max_ma")],
ICC[, c("interval_name", "min_ma", "max_ma")],
sub_epochs)
bins <- bins %>% add_row(interval_name = c("Holocene", "Pleistocene", "Pliocene", "Miocene", "Oligocene"),
min_ma = c(0, 0.0117, 2.58, 5.33, 23.03),
max_ma = c(0.0117, 2.58, 5.33, 23.03, 33.9))
#match
for(idx in unmatched){
stage <- raw$stage[idx]
hyph_spl <- strsplit(stage, split = "-")[[1]]
if(length(hyph_spl) > 1){ #necessarily equal to two, "Int1-Int2" with Int1 older than Int2
#get ref age boundaries
ref_min <- bins$min_ma[which(bins$interval_name == hyph_spl[2])]
ref_max <- bins$max_ma[which(bins$interval_name == hyph_spl[1])]
}
else{
ref_min <- bins$min_ma[which(bins$interval_name == stage)]
ref_max <- bins$max_ma[which(bins$interval_name == stage)]
}
#Check
# if((length(ref_min) == 0) | (length(ref_max) == 0)){
#   print(stage)
#   next
# }
#assign age limits
if(ref_max < raw$max_ma[idx]){
raw$max_ma[idx] <- ref_max
}
if(ref_min > raw$min_ma[idx]){
raw$min_ma[idx] <- ref_min
}
}
## Save ------------------------------------------------------------------------
saveRDS(raw, "./data_2023/SPECIES_LISTS/2-Matched_Uncleaned_Cnz_SA_Mammals.RDS")
rm(list=ls())
library(dplyr)
library(readxl)
args <- commandArgs(trailingOnly=TRUE)
rm(args)
tbl <- readRDS("./data_2023/SPECIES_LISTS/6-Fully_cleaned_EOT_SA_Mammals.RDS")
## Loop across orders ------------------------------------------------------------
n_occ <- c()
n_singl <- c()
library(dplyr)
library(tidyverse)
?pivot_longer
## Loop across orders ------------------------------------------------------------
final_df <- data.frame(order = unique(tbl$order),
n_occ = sapply(X = unique(tbl$order),
FUN = function(x){
tmp <- tbl %>% filter(order == x)
return(length(unique(tmp$genus)))}),
n_singl = sapply(X = unique(tbl$order),
FUN = function(x){
tmp <- tbl %>% filter(order == x)
gen_count <- tmp %>% count(genus)
S <- which(gen_count$n == 1)
return(length(S))
}))
tbl <- readRDS("./data_2023/SPECIES_LISTS/6-Fully_cleaned_EOT_SA_Mammals.RDS")
## Loop across orders ------------------------------------------------------------
final_df <- data.frame(order = unique(tbl$order)),
## Loop across orders ------------------------------------------------------------
final_df <- data.frame(order = unique(tbl$order))
## Loop across orders ------------------------------------------------------------
final_df <- data.frame(order = unique(tbl$order),
n_occ = sapply(X = unique(tbl$order),
FUN = function(x){
tmp <- tbl %>% filter(order == x)
return(length(unique(tmp$genus)))}))
sapply(X = unique(tbl$order),
FUN = function(x){
tmp <- tbl %>% filter(order == x)
return(length(unique(tmp$genus)))})
A <- sapply(X = unique(tbl$order),
FUN = function(x){
tmp <- tbl %>% filter(order == x)
return(length(unique(tmp$genus)))})
unique(tbl$order)
data.frame(order = unique(tbl$order), n_occ = A)
A[1]
data.frame(order = unique(tbl$order), n_occ = unname(A))
## Loop across orders ------------------------------------------------------------
final_df <- data.frame(n_occ = sapply(X = unique(tbl$order),
FUN = function(x){
tmp <- tbl %>% filter(order == x)
return(length(unique(tmp$genus)))}),
n_singl = sapply(X = unique(tbl$order),
FUN = function(x){
tmp <- tbl %>% filter(order == x)
gen_count <- tmp %>% count(genus)
S <- which(gen_count$n == 1)
return(length(S))
}))
## Loop across orders ------------------------------------------------------------
final_df <- data.frame(order = unique(tbl$order),
n_occ = unname(sapply(X = unique(tbl$order),
FUN = function(x){
tmp <- tbl %>% filter(order == x)
return(length(unique(tmp$genus)))})),
n_singl = unname(sapply(X = unique(tbl$order),
FUN = function(x){
tmp <- tbl %>% filter(order == x)
gen_count <- tmp %>% count(genus)
S <- which(gen_count$n == 1)
return(length(S))
})))
View(final_df)
## Loop across orders ----------------------------------------------------------
full_odr <- unique(tbl$order)[!is.na(unique(tbl$order))]
final_df <- data.frame(order = full_odr,
n_occ = unname(sapply(X = full_odr,
FUN = function(x){
tmp <- tbl %>% filter(order == x)
return(length(unique(tmp$genus)))})),
n_singl = unname(sapply(X = full_odr,
FUN = function(x){
tmp <- tbl %>% filter(order == x)
gen_count <- tmp %>% count(genus)
S <- which(gen_count$n == 1)
return(length(S))
})))
final_df <- data.frame(order = full_odr,
n_occ = sapply(X = full_odr,
FUN = function(x){
tmp <- tbl %>% filter(order == x)
return(length(unique(tmp$genus)))}))
final_df <- data.frame(order = full_odr,
n_occ = sapply(X = full_odr,
FUN = function(x){
tmp <- tbl %>% filter(order == x)
return(length(unique(tmp$genus)))}),
n_singl = sapply(X = full_odr,
FUN = function(x){
tmp <- tbl %>% filter(order == x)
gen_count <- tmp %>% count(genus)
S <- which(gen_count$n == 1)
return(length(S))
})))
final_df <- data.frame(order = full_odr,
n_occ = sapply(X = full_odr,
FUN = function(x){
tmp <- tbl %>% filter(order == x)
return(length(unique(tmp$genus)))}),
n_singl = sapply(X = full_odr,
FUN = function(x){
tmp <- tbl %>% filter(order == x)
gen_count <- tmp %>% count(genus)
S <- which(gen_count$n == 1)
return(length(S))
}))
final_df$prop_singl <- final_df$n_singl / final_df$n_occ
final_df$prop_singl <- sapply(X = 1:nrow(final_df),
FUN = function(x){
occ <- final_df$n_occ[x]
singl <- final_df$n_singl[x]
prop <- (singl / occ)
return(round(prop, digits = 2))
})
full_odr <- unique(tbl$order)[!is.na(unique(tbl$order))]
# Assess number of occ, singleton and proportion of singleton per order
final_df <- data.frame(order = full_odr,
n_occ = sapply(X = full_odr,
FUN = function(x){
tmp <- tbl %>% filter(order == x)
return(length(unique(tmp$genus)))}),
n_singl = sapply(X = full_odr,
FUN = function(x){
tmp <- tbl %>% filter(order == x)
gen_count <- tmp %>% count(genus)
S <- which(gen_count$n == 1)
return(length(S))
}))
# Add "total" row
ttl_count <- tbl %>% count(genus)
final_df <- final_df %>% add_row(order = "total", n_occ = nrow(tbl), n_singl = length(which(ttl_count$n == 1)))
# Add "propotion of singleton" column
final_df$prop_singl <- sapply(X = 1:nrow(final_df),
FUN = function(x){
occ <- final_df$n_occ[x]
singl <- final_df$n_singl[x]
prop <- (singl / occ)
return(round(prop, digits = 2))
})
# save
write.table(final_df, "./data_2023/recap_tbl_EOT", row.names = FALSE, quote = FALSE)
# save
write.table(final_df, "./data_2023/recap_tbl_EOT.txt", row.names = FALSE, quote = FALSE)
# save
write.csv(final_df, "./data_2023/recap_tbl_EOT.txt")
# save
write.csv(final_df, "./data_2023/recap_tbl_EOT.csv")
View(ttl_count)
# Assess number of occ, singleton and proportion of singleton per order
final_df <- data.frame(order = full_odr,
n_occ = sapply(X = full_odr,
FUN = function(x){
tmp <- tbl %>% filter(order == x)
return(nrow(tmp))}),
n_gen = sapply(X = full_odr,
FUN = function(x){
tmp <- tbl %>% filter(order == x)
return(length(unique(tmp$genus)))}),
n_singl = sapply(X = full_odr,
FUN = function(x){
tmp <- tbl %>% filter(order == x)
gen_count <- tmp %>% count(genus)
S <- which(gen_count$n == 1)
return(length(S))
}))
# Add "total" row
ttl_count <- tbl %>% count(genus)
final_df <- final_df %>% add_row(order = "total", n_occ = nrow(tbl), n_gen = nrow(ttl_count), n_singl = length(which(ttl_count$n == 1)))
# Add "propotion of singleton" column
final_df$prop_singl <- sapply(X = 1:nrow(final_df),
FUN = function(x){
occ <- final_df$n_occ[x]
singl <- final_df$n_singl[x]
prop <- (singl / occ)
return(round(prop, digits = 2))
})
# save
write.csv(final_df, "./data_2023/recap_tbl_EOT.csv")
# save
write.csv(final_df, "./data_2023/recap_tbl_EOT.csv", row.names = FALSE)
# Add "propotion of singleton" column
final_df$prop_singl <- sapply(X = 1:nrow(final_df),
FUN = function(x){
occ <- final_df$n_gen[x]
singl <- final_df$n_singl[x]
prop <- (singl / occ)
return(round(prop, digits = 2))
})
# save
write.csv(final_df, "./data_2023/recap_tbl_EOT.csv", row.names = FALSE)
length(which(is.na(tbl$order)))
length(unique(tbl$genus[which(is.na(tbl$order))]))
