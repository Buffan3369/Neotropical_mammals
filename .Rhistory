mcmcLog <- read.table(paste0(dir, "/combined_", n_conv, "_KEEP.log"),
header = TRUE, sep = "\t")
mcmcLog <- mcmcLog %>% select(starts_with("G")) #only retain correlation parameters
## 1) get column names of the SW > 0.5 ---------------------------------------
ns_names <- colnames(mean_SW)[which(mean_SW[nrow(mean_SW), ] < 0.5)] #remember that the last one is the total
mean_SW_sign <- mean_SW[, !(colnames(mean_SW) %in% ns_names)]
#go back to the corresponding variable
end_nm <- function(name){
spl <- strsplit(name, split = "")[[1]]
spl <- spl[(length(spl)-3):length(spl)]
return(paste0("G", spl[1], spl[2], spl[3], spl[4])) #the "G" stands for the corr
}
corr_vbl <- sapply(X = colnames(mean_SW_sign),
FUN = end_nm)
#subset
if(length(corr_vbl) == 0){ # if no variable found with SW > 0.5, don't go further
cat("\nNo significant correlation coefficient found.\n")
recap_tbl_sign <- NULL
}
if(zero_in_hpd == FALSE){
if(length(corr_vbl) > 0){
mcmcLog_sign <- mcmcLog %>% select(all_of(corr_vbl))
# 2) check if zero is in the 95% HPD
zeros <- c()
for(G in colnames(mcmcLog_sign)){
#5 and 95% quantiles of the distribution
Q <- as.numeric(quantile(mcmcLog_sign[, G], probs = c(0.025, 0.975)))
if(length(unique(sign(Q))) > 1){ #if these boundaries have different signs, i.e. 0 is in 95% HPD
small_abs <- min(abs(Q))
#in case the distribution is skewed and only a TINY part of the 95% HPD includes 0
if(small_abs >= 0.01){ #we consider small_abs small enough if smaller than 1e-2
zeros <- c(zeros, G)
}
}
}
#remove variables including zero in their 95% HPD from the list of the significant variables
if(length(zeros) > 0){
zeros <- str_replace(zeros, "Mean_W", "G") #otherwise names don't match
corr_vbl <- corr_vbl[-which(corr_vbl %in% zeros)]
if(length(corr_vbl) == 0){
cat("\nNo significant correlation coefficient found.\n")
}
}
}
}
# 3) reformat dataset for plotting
value <- mcmcLog[, 1]
param <- rep(0, nrow(mcmcLog))
col <- rep(colnames(mcmcLog)[1], nrow(mcmcLog))
if("l" %in% strsplit(colnames(mcmcLog)[1], "")[[1]]){ #lambda
rate <- rep("Origination", length(mcmcLog[, 1]))
}
if("m" %in% strsplit(colnames(mcmcLog)[1], "")[[1]]){ #mu
rate <- rep("Extinction", length(mcmcLog[, 1]))
}
#specify whether parameter associated to origination or extinction rate
for(i in colnames(mcmcLog)[-1]){
col <- c(col, rep(i, nrow(mcmcLog)))
value <- c(value, mcmcLog[, i])
p <- strsplit(i, split = "_")[[1]][2]
param <- c(param, rep(as.numeric(p), nrow(mcmcLog)))
if("l" %in% strsplit(i, "")[[1]]){ #lambda
rate <- c(rate, rep("Origination", nrow(mcmcLog)))
}
else if("m" %in% strsplit(i, "")[[1]]){ #mu
rate <- c(rate, rep("Extinction", nrow(mcmcLog)))
}
}
plot_df <- data.frame(param = param, rate = rate, col = col, value = value)
#significance dataframe
if(length(corr_vbl) > 0){ #if we have significant correlation coefficients
signif_df <- plot_df %>%
mutate(col = ifelse(col %in% corr_vbl, "*", NA)) %>% #if the correlation coefficient was found significant, we add a star
group_by(param, rate, col) %>%
summarise(max_val = max(density(value)[[1]]),
min_val = min(density(value)[[1]])) %>%
#adjust star position
mutate(star_pos = ifelse(abs(max_val) >= abs(min_val),
max_val + sign(max_val)*0.5,
min_val + sign(min_val)*0.5))
}
if(length(corr_vbl) == 0){ #if no coefficient was found significant
signif_df <- plot_df %>%
mutate(col = NA) %>% #if the correlation coefficient was found significant, we add a star
group_by(param, rate, col) %>%
summarise(max_val = max(density(value)[[1]]),
min_val = min(density(value)[[1]])) %>%
mutate(star_pos = ifelse(abs(max_val) >= abs(min_val),
max_val + sign(max_val),
min_val + sign(min_val)))
}
signif_df <- signif_df %>% add_column(interval = rep(interval, nrow(signif_df)))
# Create a column indicating (or not) significance of each coefficient (for colour attribution)
attrib_sign <- function(idx){
corr_idx <- which(signif_df$rate == plot_df$rate[idx] &
signif_df$param == plot_df$param[idx])
type <- signif_df$rate[corr_idx] # Extinction or Origination
signif <- signif_df$col[corr_idx] # "*" or NA
if(type == "Extinction" & is.na(signif)){
return("Ext_ns")
}
else if(type == "Extinction" & signif == "*"){
return("Ext_signif")
}
else if(type == "Origination" & is.na(signif)){
return("Ori_ns")
}
else if(type == "Origination" & signif == "*"){
return("Ori_signif")
}
}
sign_col <- sapply(X = 1:nrow(plot_df), FUN = attrib_sign)
plot_df <- plot_df %>% add_column(signif_col = sign_col,
interval = rep(interval, nrow(plot_df)),
.after = "col")
return(list(plot_df, signif_df))
}
p <- out_table_MBD(dir = "./results_EXTENDED/MBD/SALMA_smoothed/genus_level/1-Full/Oligocene_only/", interval = "Oligocene", zero_in_hpd = TRUE)
a <- p[[1]]
View(a)
b <- p[[2]]
View(b)
PLOT_DF <- data.frame(param = NA, rate = NA, col = NA, signif_col = NA, value = NA, interval = NA)
SIGNIF_DF <- data.frame(param = NA, rate = NA, col = NA, max_val = NA, min_val = NA, star_pos = NA, interval = NA)
for(trt in c("post_EECO", "Oligocene_only")){
int <- ifelse(trt == "post_EECO", "Eocene", "Oligocene")
rid <- paste0("./results_EXTENDED/MBD/SALMA_smoothed/genus_level/1-Full/", trt)
tmp <- out_table_MBD(rid, interval = int, zero_in_hpd = TRUE)
plot_df <-tmp[[1]]
signif_df <- tmp[[2]]
# Extend the big berthas
PLOT_DF <- rbind.data.frame(PLOT_DF, plot_df)
SIGNIF_DF <- rbind.data.frame(SIGNIF_DF, signif_df)
}
PLOT_DF <- PLOT_DF[-c(1),]
SIGNIF_DF <- SIGNIF_DF[-c(1),]
#plot
MBD_viol <- MBD.plot(PLOT_DF = PLOT_DF,
SIGNIF_DF = SIGNIF_DF,
x_breaks = 0:6,
x_labels = c(values(covar_idx)),
rate.labs = rate.labs,
int.labs = c("Eocene", "Oligocene"),
vjust.star.ori = 0.4,
vjust.star.ext = 0.4)
ggsave(paste0("./figures/Figure_4_new/Full_SALMA_smoothed_zero_not_HPD.pdf"),
plot = MBD_viol,
height = 300,
width = 400,
units = "mm")
## Function to get plotting dataset --------------------------------------------
out_table_MBD <- function(dir, #where the MBD log files are stored
interval, #time interval covered
zero_in_hpd=FALSE #would you like to say corr. coeff. are significant ONLY IF their sw > 0.5 (even if 0 is in their 95% HPD)?
){
# MCMC recap table
recap_tbl <- read.table(paste0(dir, "/ESS_summary.txt"),
sep = "\t", header = TRUE)
#remove runs that did not converge from recap_tbl
if(length(which(recap_tbl$ESS_posterior < 200)) > 0){
recap_tbl <- recap_tbl[-which(recap_tbl$ESS_posterior < 200), ]
}
n_conv <- nrow(recap_tbl) #number of runs that converged, useful as in the name of the combined mcmc.log file
#add the mean row in last position
recap_tbl[nrow(recap_tbl)+1, ] <- apply(X = recap_tbl, MARGIN = 2, FUN = mean, na.rm = TRUE)
#subset mean Shrinkage Weights (SW)
mean_SW <- recap_tbl %>% select(starts_with("Mean_W"))
#Open combined mcmc.log file and retain the distributions of the selected G
mcmcLog <- read.table(paste0(dir, "/combined_", n_conv, "_KEEP.log"),
header = TRUE, sep = "\t")
mcmcLog <- mcmcLog %>% select(starts_with("G")) #only retain correlation parameters
## 1) get column names of the SW > 0.5 ---------------------------------------
ns_names <- colnames(mean_SW)[which(mean_SW[nrow(mean_SW), ] < 0.5)] #remember that the last one is the total
mean_SW_sign <- mean_SW[, !(colnames(mean_SW) %in% ns_names)]
#go back to the corresponding variable
end_nm <- function(name){
spl <- strsplit(name, split = "")[[1]]
spl <- spl[(length(spl)-3):length(spl)]
return(paste0("G", spl[1], spl[2], spl[3], spl[4])) #the "G" stands for the corr
}
corr_vbl <- sapply(X = colnames(mean_SW_sign),
FUN = end_nm)
#subset
if(length(corr_vbl) == 0){ # if no variable found with SW > 0.5, don't go further
cat("\nNo significant correlation coefficient found.\n")
recap_tbl_sign <- NULL
}
if(zero_in_hpd == FALSE){
print("PATATE")
if(length(corr_vbl) > 0){
mcmcLog_sign <- mcmcLog %>% select(all_of(corr_vbl))
# 2) check if zero is in the 95% HPD
zeros <- c()
for(G in colnames(mcmcLog_sign)){
#5 and 95% quantiles of the distribution
Q <- as.numeric(quantile(mcmcLog_sign[, G], probs = c(0.025, 0.975)))
if(length(unique(sign(Q))) > 1){ #if these boundaries have different signs, i.e. 0 is in 95% HPD
small_abs <- min(abs(Q))
#in case the distribution is skewed and only a TINY part of the 95% HPD includes 0
if(small_abs >= 0.01){ #we consider small_abs small enough if smaller than 1e-2
zeros <- c(zeros, G)
}
}
}
#remove variables including zero in their 95% HPD from the list of the significant variables
if(length(zeros) > 0){
zeros <- str_replace(zeros, "Mean_W", "G") #otherwise names don't match
corr_vbl <- corr_vbl[-which(corr_vbl %in% zeros)]
if(length(corr_vbl) == 0){
cat("\nNo significant correlation coefficient found.\n")
}
}
}
}
# 3) reformat dataset for plotting
value <- mcmcLog[, 1]
param <- rep(0, nrow(mcmcLog))
col <- rep(colnames(mcmcLog)[1], nrow(mcmcLog))
if("l" %in% strsplit(colnames(mcmcLog)[1], "")[[1]]){ #lambda
rate <- rep("Origination", length(mcmcLog[, 1]))
}
if("m" %in% strsplit(colnames(mcmcLog)[1], "")[[1]]){ #mu
rate <- rep("Extinction", length(mcmcLog[, 1]))
}
#specify whether parameter associated to origination or extinction rate
for(i in colnames(mcmcLog)[-1]){
col <- c(col, rep(i, nrow(mcmcLog)))
value <- c(value, mcmcLog[, i])
p <- strsplit(i, split = "_")[[1]][2]
param <- c(param, rep(as.numeric(p), nrow(mcmcLog)))
if("l" %in% strsplit(i, "")[[1]]){ #lambda
rate <- c(rate, rep("Origination", nrow(mcmcLog)))
}
else if("m" %in% strsplit(i, "")[[1]]){ #mu
rate <- c(rate, rep("Extinction", nrow(mcmcLog)))
}
}
plot_df <- data.frame(param = param, rate = rate, col = col, value = value)
#significance dataframe
if(length(corr_vbl) > 0){ #if we have significant correlation coefficients
signif_df <- plot_df %>%
mutate(col = ifelse(col %in% corr_vbl, "*", NA)) %>% #if the correlation coefficient was found significant, we add a star
group_by(param, rate, col) %>%
summarise(max_val = max(density(value)[[1]]),
min_val = min(density(value)[[1]])) %>%
#adjust star position
mutate(star_pos = ifelse(abs(max_val) >= abs(min_val),
max_val + sign(max_val)*0.5,
min_val + sign(min_val)*0.5))
}
if(length(corr_vbl) == 0){ #if no coefficient was found significant
signif_df <- plot_df %>%
mutate(col = NA) %>% #if the correlation coefficient was found significant, we add a star
group_by(param, rate, col) %>%
summarise(max_val = max(density(value)[[1]]),
min_val = min(density(value)[[1]])) %>%
mutate(star_pos = ifelse(abs(max_val) >= abs(min_val),
max_val + sign(max_val),
min_val + sign(min_val)))
}
signif_df <- signif_df %>% add_column(interval = rep(interval, nrow(signif_df)))
# Create a column indicating (or not) significance of each coefficient (for colour attribution)
attrib_sign <- function(idx){
corr_idx <- which(signif_df$rate == plot_df$rate[idx] &
signif_df$param == plot_df$param[idx])
type <- signif_df$rate[corr_idx] # Extinction or Origination
signif <- signif_df$col[corr_idx] # "*" or NA
if(type == "Extinction" & is.na(signif)){
return("Ext_ns")
}
else if(type == "Extinction" & signif == "*"){
return("Ext_signif")
}
else if(type == "Origination" & is.na(signif)){
return("Ori_ns")
}
else if(type == "Origination" & signif == "*"){
return("Ori_signif")
}
}
sign_col <- sapply(X = 1:nrow(plot_df), FUN = attrib_sign)
plot_df <- plot_df %>% add_column(signif_col = sign_col,
interval = rep(interval, nrow(plot_df)),
.after = "col")
return(list(plot_df, signif_df))
}
for(trt in c("post_EECO", "Oligocene_only")){
int <- ifelse(trt == "post_EECO", "Eocene", "Oligocene")
rid <- paste0("./results_EXTENDED/MBD/SALMA_smoothed/genus_level/1-Full/", trt)
tmp <- out_table_MBD(rid, interval = int, zero_in_hpd = TRUE)
plot_df <-tmp[[1]]
signif_df <- tmp[[2]]
# Extend the big berthas
PLOT_DF <- rbind.data.frame(PLOT_DF, plot_df)
SIGNIF_DF <- rbind.data.frame(SIGNIF_DF, signif_df)
}
PLOT_DF <- PLOT_DF[-c(1),]
SIGNIF_DF <- SIGNIF_DF[-c(1),]
#plot
MBD_viol <- MBD.plot(PLOT_DF = PLOT_DF,
SIGNIF_DF = SIGNIF_DF,
x_breaks = 0:6,
x_labels = c(values(covar_idx)),
rate.labs = rate.labs,
int.labs = c("Eocene", "Oligocene"),
vjust.star.ori = 0.4,
vjust.star.ext = 0.4)
MBD_viol
ggsave(paste0("./figures/Figure_4_new/Full_SALMA_smoothed_zero_not_HPD.pdf"),
plot = MBD_viol,
height = 300,
width = 400,
units = "mm")
rlang::last_trace()
PLOT_DF <- data.frame(param = NA, rate = NA, col = NA, signif_col = NA, value = NA, interval = NA)
SIGNIF_DF <- data.frame(param = NA, rate = NA, col = NA, max_val = NA, min_val = NA, star_pos = NA, interval = NA)
for(trt in c("post_EECO", "Oligocene_only")){
int <- ifelse(trt == "post_EECO", "Eocene", "Oligocene")
rid <- paste0("./results_EXTENDED/MBD/SALMA_smoothed/genus_level/1-Full/", trt)
tmp <- out_table_MBD(rid, interval = int, zero_in_hpd = TRUE)
plot_df <-tmp[[1]]
signif_df <- tmp[[2]]
# Extend the big berthas
PLOT_DF <- rbind.data.frame(PLOT_DF, plot_df)
SIGNIF_DF <- rbind.data.frame(SIGNIF_DF, signif_df)
}
PLOT_DF <- PLOT_DF[-c(1),]
SIGNIF_DF <- SIGNIF_DF[-c(1),]
#plot
MBD_viol <- MBD.plot(PLOT_DF = PLOT_DF,
SIGNIF_DF = SIGNIF_DF,
x_breaks = 0:6,
x_labels = c(values(covar_idx)),
rate.labs = rate.labs,
int.labs = c("Eocene", "Oligocene"))
ggsave(paste0("./figures/Figure_4_new/Full_SALMA_smoothed_zero_not_HPD.pdf"),
plot = MBD_viol,
height = 300,
width = 400,
units = "mm")
dir <- "./results_EXTENDED/MBD/SALMA_smoothed/genus_level/1-Full/"
# MCMC recap table
recap_tbl <- read.table(paste0(dir, "/ESS_summary.txt"),
sep = "\t", header = TRUE)
#remove runs that did not converge from recap_tbl
if(length(which(recap_tbl$ESS_posterior < 200)) > 0){
recap_tbl <- recap_tbl[-which(recap_tbl$ESS_posterior < 200), ]
}
n_conv <- nrow(recap_tbl) #number of runs that converged, useful as in the name of the combined mcmc.log file
#add the mean row in last position
recap_tbl[nrow(recap_tbl)+1, ] <- apply(X = recap_tbl, MARGIN = 2, FUN = mean, na.rm = TRUE)
#subset mean Shrinkage Weights (SW)
mean_SW <- recap_tbl %>% select(starts_with("Mean_W"))
library(tidyverse)
#subset mean Shrinkage Weights (SW)
mean_SW <- recap_tbl %>% select(starts_with("Mean_W"))
View(mean_SW)
#Open combined mcmc.log file and retain the distributions of the selected G
mcmcLog <- read.table(paste0(dir, "/combined_", n_conv, "_KEEP.log"),
header = TRUE, sep = "\t")
mcmcLog <- mcmcLog %>% select(starts_with("G")) #only retain correlation parameters
## 1) get column names of the SW > 0.5 ---------------------------------------
ns_names <- colnames(mean_SW)[which(mean_SW[nrow(mean_SW), ] < 0.5)] #remember that the last one is the total
mean_SW_sign <- mean_SW[, !(colnames(mean_SW) %in% ns_names)]
View(mean_SW_sign)
################################################################################
# Name: 4-Figure4.R
# Author: Lucas Buffan
# Contact: lucas.l.buffan@gmail.com
# Aim: Script for figure 4 (MBD results full Eocene post-EOT + Oligocene).
################################################################################
library(hash)
## Source MBD accessory function -----------------------------------------------
source("./R/useful/4b-MBD_accessory.R")
## Define covariable names -----------------------------------------------------
covar_idx <- hash("0" = "Self-diversity",
"1" = "Plant Diversity",
"2" = "Andes Elevation",
"3" = "Global Temperature",
"4" = "Sea Level",
"5" = "Habitat Openness",
"6" = "rLAI")
## Set strip labels for plots --------------------------------------------------
rate.labs <- c("Extinction rate", "Origination rate")
names(rate.labs) <- c("Extinction", "Origination")
int.labs <- c("Eocene", "Oligocene")
names(int.labs) <- c("Eocene", "Oligocene")
## Directories -----------------------------------------------------------------
dirs <- c("1-Full/", "6-Order_level/")
## Loop for full-time panels ---------------------------------------------------
for(salma in c("SALMA_smoothed")){
for(dir in dirs){
# full
if(strsplit(dir, split = "-")[[1]][1] == "1"){
int <- ifelse("EOT")
rid <- paste0("./results_EXTENDED/MBD/", salma, "/genus_level/", dir)
tmp <- out_table_MBD(rid, interval = int)
plot_df <- tmp[[1]]
signif_df <- tmp[[2]]
#plot
MBD_viol <- MBD.plot(PLOT_DF = plot_df,
SIGNIF_DF = signif_df,
x_breaks = 0:6,
x_labels = c(values(covar_idx)),
rate.labs = rate.labs,
vjust.star.ori = 0.4,
vjust.star.ext = 0.4,
time_facetting = FALSE)
ggsave(paste0("./figures/Figure_4_new/Full_", salma, "_COMPLETE.pdf"),
plot = MBD_viol,
height = 150,
width = 350,
units = "mm")
}
# loop across orders
if(strsplit(dir, split = "-")[[1]][1] == "6"){
for(odr in c("Notoungulata")){
int <- "EOT"
rid <- paste0("./results_EXTENDED/MBD/", salma, "/genus_level/", dir, odr)
tmp <- out_table_MBD(rid, interval = int)
plot_df1 <-tmp[[1]]
signif_df1 <- tmp[[2]]
# plot
MBD_viol1 <- MBD.plot(PLOT_DF = plot_df1,
SIGNIF_DF = signif_df1,
x_breaks = 0:6,
x_labels = c(values(covar_idx)),
rate.labs = rate.labs,
vjust.star.ori = 0.4,
vjust.star.ext = 0.4,
time_facetting = FALSE)
ggsave(paste0("./figures/Figure_4_new/", odr,"_", salma, "_COMPLETE.pdf"),
plot = MBD_viol1,
height = 150,
width = 350,
units = "mm")
}
}
}
}
## Loop for time-faceted panels ------------------------------------------------
for(salma in c("SALMA_smoothed")){
for(dir in dirs){
# full
if(strsplit(dir, split = "-")[[1]][1] == "1"){
# initialise large tables
PLOT_DF <- data.frame(param = NA, rate = NA, col = NA, signif_col = NA, value = NA, interval = NA)
SIGNIF_DF <- data.frame(param = NA, rate = NA, col = NA, max_val = NA, min_val = NA, star_pos = NA, interval = NA)
for(trt in c("post_EECO", "Oligocene_only")){
int <- ifelse(trt == "post_EECO", "Eocene", "Oligocene")
rid <- paste0("./results_EXTENDED/MBD/", salma, "/genus_level/", dir, trt)
tmp <- out_table_MBD(rid, interval = int)
plot_df <-tmp[[1]]
signif_df <- tmp[[2]]
# Extend the big berthas
PLOT_DF <- rbind.data.frame(PLOT_DF, plot_df)
SIGNIF_DF <- rbind.data.frame(SIGNIF_DF, signif_df)
}
PLOT_DF <- PLOT_DF[-c(1),]
SIGNIF_DF <- SIGNIF_DF[-c(1),]
#plot
MBD_viol <- MBD.plot(PLOT_DF = PLOT_DF,
SIGNIF_DF = SIGNIF_DF,
x_breaks = 0:6,
x_labels = c(values(covar_idx)),
rate.labs = rate.labs,
int.labs = c("Eocene", "Oligocene"),
vjust.star.ori = 0.4,
vjust.star.ext = 0.4)
ggsave(paste0("./figures/Figure_4_new/Full_", salma, ".pdf"),
plot = MBD_viol,
height = 300,
width = 400,
units = "mm")
}
# loop across orders
if(strsplit(dir, split = "-")[[1]][1] == "6"){
for(odr in c("Notoungulata")){
# initialise large tables
PLOT_DF1 <- data.frame(param = NA, rate = NA, col = NA, signif_col = NA, value = NA, interval = NA)
SIGNIF_DF1 <- data.frame(param = NA, rate = NA, col = NA, max_val = NA, min_val = NA, star_pos = NA, interval = NA)
for(trt in c("post_EECO/", "Oligocene_only/")){
int <- ifelse(trt == "post_EECO/", "Eocene", "Oligocene")
rid <- paste0("./results_EXTENDED/MBD/", salma, "/genus_level/", dir, odr, "/", trt)
tmp <- out_table_MBD(rid, interval = int)
plot_df1 <-tmp[[1]]
signif_df1 <- tmp[[2]]
# Extend the big berthas
PLOT_DF1 <- rbind.data.frame(PLOT_DF1, plot_df1)
SIGNIF_DF1 <- rbind.data.frame(SIGNIF_DF1, signif_df1)
}
# remove initialising rows
PLOT_DF1 <- PLOT_DF1[-c(1),]
SIGNIF_DF1 <- SIGNIF_DF1[-c(1),]
# plot
MBD_viol1 <- MBD.plot(PLOT_DF = PLOT_DF1,
SIGNIF_DF = SIGNIF_DF1,
x_breaks = 0:6,
x_labels = c(values(covar_idx)),
rate.labs = rate.labs,
vjust.star.ori = 0.4,
vjust.star.ext = 0.4,
int.labs = c("Eocene", "Oligocene"))
ggsave(paste0("./figures/Figure_4_new/", odr,"_", salma, ".pdf"),
plot = MBD_viol1,
height = 300,
width = 400,
units = "mm")
}
}
}
}
