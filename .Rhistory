#Lineages through time
ltt_plt <- ltt_plot(ltt_df = ltt,
x_breaks = c(23.03, 27.82, 33.9, 37.82, 41.2, 47.8, 56),
y_breaks = seq(0,(round(max(ltt$Diversity), -1) + 10),5),
y_limits = c(0,(round(max(ltt$Diversity), -1) + 20)),
main = paste0("Replicate ",i),
x_lab = x_lab,
y_lab = y_lab_ltt)
list_LTT[[i+1]] <- ltt_plt
#Preservation rates
Q_plot <- q_plot(data = Q,
ltt_input = ltt,
y_limits = c(0, 3.25),
x_limits = c(min(max(ltt$Age), 56), 23.03),
y_breaks = seq(0, 3, 0.25),
x_lab = x_lab,
y_lab = y_lab_q)
list_Q[[i+1]] <- Q_plot
}
library(ggpubr)
library(hash)
## Source accessory functions for plotting -------------------------------------
source("~/Documents/GitHub/CorsaiR/R/1-extract_param_from_PyRate_outputs.R")
source("~/Documents/GitHub/CorsaiR/R/2-plotting_facilities.R")
basal_dir <- "./results/SALMA_smoothed/genus_level/simulations"
## RTT panel -------------------------------------------------------------------
list_RTT <- list()
list_LTT <- list()
list_Q <- list()
for(i in 0:12){
#Directories
dir_rtt <- paste0(basal_dir, "/replicate_", i, "/combined_logs/RTT_plots.r")
dir_ltt <- paste0(basal_dir, "/replicate_", i, "/LTT/per_replicate/")
dir_q <- paste0(basal_dir, "/replicate_", i, "/Q_SHIFTS/Parsed_Q_rates.csv")
#Get data
rtt <- extract_rtt(dir_rtt, ana = "RJMCMC")
ltt <- extract_ltt(dir_ltt)
Q <- read.table(dir_q, header = TRUE)
#Plotting settings
x_lab <- NULL
y_lab_rtt <- NULL
y_lab_ltt <- NULL
y_lab_q <- NULL
if(i %in% 5:9){
x_lab <- "Time (Ma)"
}
if(i %in% c(0, 5)){
y_lab_rtt <- "Rates (events/lineage/My)"
y_lab_ltt <- "Diversity (Nb. lineages)"
y_lab_q <- "Mean preservation rate (occ/lineage/My)"
}
#Origination and Extinction rates
sp_ex <- rtt_plot(data = rtt,
type = "SpEx",
y_breaks = seq(from = 0, to = 1.4, by = 0.2),
y_limits = c(0, 1.5),
main = paste0("Replicate ",i),
x_lab = x_lab,
y_lab = y_lab_rtt) +
geom_hline(yintercept = 0.17, linetype = "dashed") +
geom_hline(yintercept = 0.1, linetype = "dashed")
list_RTT[[i+1]] <- sp_ex
#Lineages through time
ltt_plt <- ltt_plot(ltt_df = ltt,
x_breaks = c(23.03, 27.82, 33.9, 37.82, 41.2, 47.8, 56),
y_breaks = seq(0,(round(max(ltt$Diversity), -1) + 10),5),
y_limits = c(0,(round(max(ltt$Diversity), -1) + 20)),
main = paste0("Replicate ",i),
x_lab = x_lab,
y_lab = y_lab_ltt)
list_LTT[[i+1]] <- ltt_plt
#Preservation rates
Q_plot <- q_plot(data = Q,
ltt_input = ltt,
y_limits = c(0, 3.25),
x_limits = c(min(max(ltt$Age), 56), 23.03),
y_breaks = seq(0, 3, 0.25),
x_lab = x_lab,
y_lab = y_lab_q)
list_Q[[i+1]] <- Q_plot
}
################################################################################
####################### Panel for the simulation outputs #######################
################################################################################
library(ggpubr)
library(hash)
## Source accessory functions for plotting -------------------------------------
source("~/Documents/GitHub/CorsaiR/R/1-extract_param_from_PyRate_outputs.R")
source("~/Documents/GitHub/CorsaiR/R/2-plotting_facilities.R")
basal_dir <- "./results/SALMA_smoothed/genus_level/simulations"
## RTT panel -------------------------------------------------------------------
list_RTT <- list()
list_LTT <- list()
list_Q <- list()
for(i in 0:12){
#Directories
dir_rtt <- paste0(basal_dir, "/replicate_", i, "/combined_logs/RTT_plots.r")
dir_ltt <- paste0(basal_dir, "/replicate_", i, "/LTT/per_replicate/")
dir_q <- paste0(basal_dir, "/replicate_", i, "/Q_SHIFTS/Parsed_Q_rates.csv")
#Get data
rtt <- extract_rtt(dir_rtt, ana = "RJMCMC")
ltt <- extract_ltt(dir_ltt)
Q <- read.table(dir_q, header = TRUE)
#Plotting settings
x_lab <- NULL
y_lab_rtt <- NULL
y_lab_ltt <- NULL
y_lab_q <- NULL
if(i %in% 5:9){
x_lab <- "Time (Ma)"
}
if(i %in% c(0, 5)){
y_lab_rtt <- "Rates (events/lineage/My)"
y_lab_ltt <- "Diversity (Nb. lineages)"
y_lab_q <- "Mean preservation rate (occ/lineage/My)"
}
#Origination and Extinction rates
sp_ex <- rtt_plot(data = rtt,
type = "SpEx",
y_breaks = seq(from = 0, to = 1.4, by = 0.2),
y_limits = c(0, 1.5),
main = paste0("Replicate ",i),
x_lab = x_lab,
y_lab = y_lab_rtt) +
geom_hline(yintercept = 0.17, linetype = "dashed") +
geom_hline(yintercept = 0.1, linetype = "dashed")
list_RTT[[i+1]] <- sp_ex
#Lineages through time
ltt_plt <- ltt_plot(ltt_df = ltt,
x_breaks = c(23.03, 27.82, 33.9, 37.82, 41.2, 47.8, 56),
y_breaks = seq(0,(round(max(ltt$Diversity), -1) + 10),5),
y_limits = c(0,(round(max(ltt$Diversity), -1) + 20)),
main = paste0("Replicate ",i),
x_lab = x_lab,
y_lab = y_lab_ltt)
list_LTT[[i+1]] <- ltt_plt
#Preservation rates
Q_plot <- q_plot(data = Q,
ltt_input = ltt,
y_limits = c(0, 3.25),
y_breaks = seq(0, 3, 0.25),
x_lab = x_lab,
y_lab = y_lab_q)
list_Q[[i+1]] <- Q_plot
}
################################################################################
####################### Panel for the simulation outputs #######################
################################################################################
library(ggpubr)
library(hash)
## Source accessory functions for plotting -------------------------------------
source("~/Documents/GitHub/CorsaiR/R/1-extract_param_from_PyRate_outputs.R")
source("~/Documents/GitHub/CorsaiR/R/2-plotting_facilities.R")
basal_dir <- "./results/SALMA_smoothed/genus_level/simulations"
## RTT panel -------------------------------------------------------------------
list_RTT <- list()
list_LTT <- list()
list_Q <- list()
for(i in 0:12){
#Directories
dir_rtt <- paste0(basal_dir, "/replicate_", i, "/combined_logs/RTT_plots.r")
dir_ltt <- paste0(basal_dir, "/replicate_", i, "/LTT/per_replicate/")
dir_q <- paste0(basal_dir, "/replicate_", i, "/Q_SHIFTS/Parsed_Q_rates.csv")
#Get data
rtt <- extract_rtt(dir_rtt, ana = "RJMCMC")
ltt <- extract_ltt(dir_ltt)
Q <- read.table(dir_q, header = TRUE)
#Plotting settings
x_lab <- NULL
y_lab_rtt <- NULL
y_lab_ltt <- NULL
y_lab_q <- NULL
if(i %in% 5:9){
x_lab <- "Time (Ma)"
}
if(i %in% c(0, 5)){
y_lab_rtt <- "Rates (events/lineage/My)"
y_lab_ltt <- "Diversity (Nb. lineages)"
y_lab_q <- "Mean preservation rate (occ/lineage/My)"
}
#Origination and Extinction rates
sp_ex <- rtt_plot(data = rtt,
type = "SpEx",
y_breaks = seq(from = 0, to = 1.4, by = 0.2),
y_limits = c(0, 1.5),
main = paste0("Replicate ",i),
x_lab = x_lab,
y_lab = y_lab_rtt) +
geom_hline(yintercept = 0.17, linetype = "dashed") +
geom_hline(yintercept = 0.1, linetype = "dashed")
list_RTT[[i+1]] <- sp_ex
#Lineages through time
ltt_plt <- ltt_plot(ltt_df = ltt,
x_breaks = c(23.03, 27.82, 33.9, 37.82, 41.2, 47.8, 56),
y_breaks = seq(0,(round(max(ltt$Diversity), -1) + 10),5),
y_limits = c(0,(round(max(ltt$Diversity), -1) + 20)),
main = paste0("Replicate ",i),
x_lab = x_lab,
y_lab = y_lab_ltt)
list_LTT[[i+1]] <- ltt_plt
#Preservation rates
Q_plot <- q_plot(q_df = Q,
ltt_input = ltt,
y_limits = c(0, 3.25),
y_breaks = seq(0, 3, 0.25),
x_lab = x_lab,
y_lab = y_lab_q)
list_Q[[i+1]] <- Q_plot
}
#Do panels
rtt_panel <- ggarrange(plotlist = list_RTT,
nrow = 3,
ncol = 5)
ltt_panel <- ggarrange(plotlist = list_LTT,
nrow = 3,
ncol = 5)
Q_panel <- ggarrange(plotlist = list_Q,
nrow = 3,
ncol = 5)
#Save them
ggsave("./figures/simulations/100_replicates/rtt_panel.png",
plot = rtt_panel,
height = 400,
width = 1000,
units = "mm",
dpi = 500)
ggsave("./figures/simulations/100_replicates/ltt_panel.png",
plot = ltt_panel,
height = 400,
width = 1000,
units = "mm",
dpi = 500)
ggsave("./figures/simulations/100_replicates/Qrates_panel.png",
plot = Q_panel,
height = 400,
width = 1000,
units = "mm",
dpi = 500)
#Save them
ggsave("./figures/simulations/100_replicates/rtt_panel.png",
plot = rtt_panel,
height = 800,
width = 1000,
units = "mm",
dpi = 200)
ggsave("./figures/simulations/100_replicates/ltt_panel.png",
plot = ltt_panel,
height = 800,
width = 1000,
units = "mm",
dpi = 200)
ggsave("./figures/simulations/100_replicates/Qrates_panel.png",
plot = Q_panel,
height = 800,
width = 1000,
units = "mm",
dpi = 200)
ggsave("./figures/simulations/100_replicates/rtt_panel.png",
plot = rtt_panel,
height = 700,
width = 1000,
units = "mm",
dpi = 200)
ggsave("./figures/simulations/100_replicates/ltt_panel.png",
plot = ltt_panel,
height = 700,
width = 1000,
units = "mm",
dpi = 200)
ggsave("./figures/simulations/100_replicates/Qrates_panel.png",
plot = Q_panel,
height = 700,
width = 1000,
units = "mm",
dpi = 200)
library(dplyr)
library(ggplot2)
library(deeptime)
library(hash)
library(randomcoloR)
source("~/Documents/GitHub/CorsaiR/R/2-plotting_facilities.R")
div_dict <- hash()
for(j in 0:12){
simul_lin <- read.table(paste0("./data_2023/simulated_data/All_lineages_TsTe/100_replicates/sim_", j, ".txt"),
sep = "\t",
header = TRUE)
time_ttl <- true_ltt(simul_lin)[[1]]
cumul_occ <- true_ltt(simul_lin)[[2]]
div_dict[paste0("time_", j)] <- time_ttl
div_dict[paste0("div_", j)] <- cumul_occ
}
plot(x = c(66.5, values(div_dict["time_0"])),
y = values(div_dict["div_0"]),
type = "l",
col = randomColor(),
xlab = "Time (MyBP)",
ylab = "Diversity")
for(i in 1:12){
lines(x = c(66.5, values(div_dict[paste0("time_", i)])),
y = values(div_dict[paste0("div_", i)]),
type = "l",
col = randomColor())
}
plot(x = c(66.5, values(div_dict["time_0"])),
y = values(div_dict["div_0"]),
type = "l",
col = randomColor(),
xlab = "Time (MyBP)",
ylab = "Diversity",
xlim = c(56, 33))
for(i in 1:12){
lines(x = c(66.5, values(div_dict[paste0("time_", i)])),
y = values(div_dict[paste0("div_", i)]),
type = "l",
col = randomColor())
}
plot(x = c(66.5, values(div_dict["time_0"])),
y = values(div_dict["div_0"]),
type = "l",
col = randomColor(),
xlab = "Time (MyBP)",
ylab = "Diversity",
xlim = c(56, 33),
ylim = c(0, 150))
for(i in 1:12){
lines(x = c(66.5, values(div_dict[paste0("time_", i)])),
y = values(div_dict[paste0("div_", i)]),
type = "l",
col = randomColor())
}
plot(x = c(66.5, values(div_dict["time_0"])),
y = values(div_dict["div_0"]),
type = "l",
col = randomColor(),
xlab = "Time (MyBP)",
ylab = "Diversity",
xlim = c(56, 33),
ylim = c(0, 120))
for(i in 1:12){
lines(x = c(66.5, values(div_dict[paste0("time_", i)])),
y = values(div_dict[paste0("div_", i)]),
type = "l",
col = randomColor())
}
dev.off()
?png
png("./figures/simulations/100_replicates/13_simulated_LTT.png", res = 200)
plot(x = c(66.5, values(div_dict["time_0"])),
y = values(div_dict["div_0"]),
type = "l",
col = randomColor(),
xlab = "Time (MyBP)",
ylab = "Diversity",
xlim = c(56, 33),
ylim = c(0, 120))
for(i in 1:12){
lines(x = c(66.5, values(div_dict[paste0("time_", i)])),
y = values(div_dict[paste0("div_", i)]),
type = "l",
col = randomColor())
}
dev.off()
png("./figures/simulations/100_replicates/13_simulated_LTT.png", res = 200, width = 200, height = 200)
plot(x = c(66.5, values(div_dict["time_0"])),
y = values(div_dict["div_0"]),
type = "l",
col = randomColor(),
xlab = "Time (MyBP)",
ylab = "Diversity",
xlim = c(56, 33),
ylim = c(0, 120))
png("./figures/simulations/100_replicates/13_simulated_LTT.png", width = 200, height = 200)
plot(x = c(66.5, values(div_dict["time_0"])),
y = values(div_dict["div_0"]),
type = "l",
col = randomColor(),
xlab = "Time (MyBP)",
ylab = "Diversity",
xlim = c(56, 33),
ylim = c(0, 120))
dev.off()
dev.off()
png("./figures/simulations/100_replicates/13_simulated_LTT.png", width = 200, height = 200)
plot(x = c(66.5, values(div_dict["time_0"])),
y = values(div_dict["div_0"]),
type = "l",
col = randomColor(),
xlab = "Time (MyBP)",
ylab = "Diversity",
xlim = c(56, 33),
ylim = c(0, 120))
for(i in 1:12){
lines(x = c(66.5, values(div_dict[paste0("time_", i)])),
y = values(div_dict[paste0("div_", i)]),
type = "l",
col = randomColor())
}
dev.off()
png("./figures/simulations/100_replicates/13_simulated_LTT.png", width = 1000, height = 1000)
plot(x = c(66.5, values(div_dict["time_0"])),
y = values(div_dict["div_0"]),
type = "l",
col = randomColor(),
xlab = "Time (MyBP)",
ylab = "Diversity",
xlim = c(56, 33),
ylim = c(0, 120))
for(i in 1:12){
lines(x = c(66.5, values(div_dict[paste0("time_", i)])),
y = values(div_dict[paste0("div_", i)]),
type = "l",
col = randomColor())
}
dev.off()
plot(x = c(66.5, values(div_dict["time_0"])),
y = values(div_dict["div_0"]),
type = "l",
col = randomColor(),
xlab = "Time (MyBP)",
ylab = "Diversity",
xlim = c(56, 23),
ylim = c(0, 150))
for(i in 1:12){
lines(x = c(66.5, values(div_dict[paste0("time_", i)])),
y = values(div_dict[paste0("div_", i)]),
type = "l",
col = randomColor())
}
plot(x = c(66.5, values(div_dict["time_0"])),
y = values(div_dict["div_0"]),
type = "l",
col = randomColor(),
xlab = "Time (MyBP)",
ylab = "Diversity",
xlim = c(56, 23),
ylim = c(0, 180))
for(i in 1:12){
lines(x = c(66.5, values(div_dict[paste0("time_", i)])),
y = values(div_dict[paste0("div_", i)]),
type = "l",
col = randomColor())
}
png("./figures/simulations/100_replicates/13_simulated_LTT.png", width = 1000, height = 1000)
plot(x = c(66.5, values(div_dict["time_0"])),
y = values(div_dict["div_0"]),
type = "l",
col = randomColor(),
xlab = "Time (MyBP)",
ylab = "Diversity",
xlim = c(56, 23),
ylim = c(0, 180))
for(i in 1:12){
lines(x = c(66.5, values(div_dict[paste0("time_", i)])),
y = values(div_dict[paste0("div_", i)]),
type = "l",
col = randomColor())
}
dev.off()
dev.off()
psl <- readRDS("./data_2023/SPECIES_LISTS/5-Fully_cleaned_EOT_SA_Mammals_SALMA_kept_Tropics_Diet.RDS")
length(unique(psl$order))
View(psl)
length(unique(psl$family))
length(unique(psl$genus))
length(unique(psl$accepted_name))
library(dplyr)
psl <- psl %>%
group_by(loc, accepted_name, genus) %>%
count(loc)
View(psl)
sum(psl$n)
psl <- readRDS("./data_2023/SPECIES_LISTS/5-Fully_cleaned_EOT_SA_Mammals_SALMA_kept_Tropics_Diet.RDS")
psl1 <- psl %>%
group_by(loc, genus) %>%
count(loc)
length(which(psl1$loc == "E"))
sum(psl1$n[which(psl1$loc == "E")])
psl1 <- psl %>%
group_by(loc, accepted_name) %>%
count(loc)
length(which(psl1$loc == "E"))
length(which(psl1$loc == "T"))
sum(psl1$n[which(psl1$loc == "E")])
psl1 <- psl %>%
group_by(diet, accepted_name) %>%
count(diet)
View(psl1)
length(which(psl1$diet == "carnivore"))
length(which(psl1$diet == "herbivore"))
length(which(psl1$diet == "omnivore"))
length(which(psl1$diet == "insectivore"))
31+452+153+102
659+91
length(which(is.na(psl$diet)))
unique(psl$diet)
psl1 <- psl %>%
group_by(diet, genus) %>%
count(diet)
length(which(psl1$diet == "insectivore"))
length(which(psl1$diet == "omnivore"))
length(which(psl1$diet == "herbivore"))
length(which(psl1$diet == "carnivore"))
length(which(psl1$diet == "frugivore"))
View(psl)
which(is.na(psl$diet))
unique(psl$diet)
length(which(psl$diet == "frugivore"))
length(which(psl$diet == "herbivore"))
length(which(psl$diet == "carnivore"))
length(which(psl$diet == "omnivore"))
length(which(psl$diet == "insectivore"))
68+1212+270+209
