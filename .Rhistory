#EOT line
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
annotate(geom = "text", x = 35, y = 16.5, label = " ") +
annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53)) +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 10))
noto_genera <- spl %>%
filter(order == "Notoungulata") %>%
group_by(family, genus) %>%
distinct(genus)
# 3) Families plot
noto_fam <- spl %>%
filter(order == "Notoungulata") %>%
distinct(family) %>%
filter(!is.na(family)) %>%
mutate(Ts = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = noto_genera, TsTe_tbl = TsTe_noto, time = "Ts"),
Te = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = noto_genera, TsTe_tbl = TsTe_noto, time = "Te"),
phyl = ifelse(family %in% monophyl, "Monophyletic", "Non-monophyletic")) %>%
arrange(Ts) %>%
ggplot(aes(y = fct_inorder(family), yend = fct_inorder(family))) +
geom_segment(aes(x = Ts, xend = Te, colour = phyl), linewidth = 2) +
scale_colour_manual(values = c("black", "grey60")) +
# add silhouette
add_phylopic(x = 48.5, y = 2.5, name = "Trigonostylops", ysize = 1.5) +
annotate(geom = "text", x = 48, y = 1.2, label = "Notoungulata", size = 6) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Family", colour = NULL) +
#EOT line
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
annotate(geom = "text", x = 35, y = 16.5, label = " ") +
annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53)) +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 10))
# Families: table with each genus and its associated family
# Monophyletic families, according to Billet et al. (2011)
monophyl <- c("Homalodotheriidae", "Leontiniidae", "Toxodontidae",
"Interatheriidae", "Mesotheriidae", "Hegetotheriidae")
# 3) Families plot
noto_fam <- spl %>%
filter(order == "Notoungulata") %>%
distinct(family) %>%
filter(!is.na(family)) %>%
mutate(Ts = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = noto_genera, TsTe_tbl = TsTe_noto, time = "Ts"),
Te = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = noto_genera, TsTe_tbl = TsTe_noto, time = "Te"),
phyl = ifelse(family %in% monophyl, "Monophyletic", "Non-monophyletic")) %>%
arrange(Ts) %>%
ggplot(aes(y = fct_inorder(family), yend = fct_inorder(family))) +
geom_segment(aes(x = Ts, xend = Te, colour = phyl), linewidth = 2) +
scale_colour_manual(values = c("black", "grey60")) +
# add silhouette
add_phylopic(x = 48.5, y = 2.5, name = "Trigonostylops", ysize = 1.5) +
annotate(geom = "text", x = 48, y = 1.2, label = "Notoungulata", size = 6) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Family", colour = NULL) +
#EOT line
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
annotate(geom = "text", x = 35, y = 16.5, label = " ") +
annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53)) +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 10))
ggsave("./figures/Figure_3/Noto_turnover_families.png", noto_fam, height = 7, width = 10, dpi = 400)
# 3) Families plot
noto_fam <- spl %>%
filter(order == "Notoungulata") %>%
distinct(family) %>%
filter(!is.na(family)) %>%
mutate(Ts = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = noto_genera, TsTe_tbl = TsTe_noto, time = "Ts"),
Te = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = noto_genera, TsTe_tbl = TsTe_noto, time = "Te"),
phyl = ifelse(family %in% monophyl, "Monophyletic", "Non-monophyletic")) %>%
arrange(Ts) %>%
ggplot(aes(y = fct_inorder(family), yend = fct_inorder(family))) +
geom_segment(aes(x = Ts, xend = Te, colour = phyl), linewidth = 2) +
scale_colour_manual(values = c("black", "grey60")) +
# add silhouette
add_phylopic(x = 48.5, y = 2.5, name = "Trigonostylops", ysize = 1.5) +
annotate(geom = "text", x = 48, y = 1.2, label = "Notoungulata", size = 6) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Family", colour = NULL) +
#EOT line
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
annotate(geom = "text", x = 35, y = 16.5, label = " ") +
annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53)) +
theme(axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 10))
ggsave("./figures/Figure_3/Noto_turnover_families.png", noto_fam, height = 7, width = 10, dpi = 400)
ggsave("./figures/supp_figs/Fig_turnover/Noto_turnover.png", turnov_gen, height = 10, width = 20, dpi = 400)
noto_death <- TsTe_noto2 %>%
ggplot(aes(y = fct_inorder(genus), yend = fct_inorder(genus))) +
geom_segment(aes(x = ts, xend = te, colour = family), linewidth = 0.8) +
scale_colour_manual(values = c("#993404", "#fe9929", "#fc9272", "black")) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Genus", colour = "Family") +
# add silhouette
add_phylopic(x = 49.2, y = 11, name = "Trigonostylops", ysize = 8) +
annotate(geom = "text", x = 49, y = 5, label = "Notoungulata", size = 6) +
# highlight relevant birth events with rectangles
# geom_rect(aes(ymin = 82.5, ymax = 99.5, xmin = 37.5, xmax = 40.5), fill = "transparent", colour = "#a50f15", linewidth = 0.7) +
# annotate(geom = "text", y = 91, x = 36.5, label = "(1)", size = 7, colour = "#a50f15") +
# geom_rect(aes(ymin = 61.5, ymax = 82.5, xmin = 36, xmax = 32.2), fill = "transparent", colour = "#a50f15", linewidth = 0.7) +
# annotate(geom = "text", y = 72, x = 31.2, label = "(2)", size = 7, colour = "#a50f15") +
# EOT line
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
annotate(geom = "text", x = 32.5, y = 115, label = "EOT", size = 7, colour = "red") +
# Artificially extend plotting window
annotate(geom = "text", x = 35, y = 118.5, label = " ") +
annotate(geom = "text", x = 35, y = 0.5, label = " ") +
# GTS
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53)) +
theme(axis.text.y = element_text(size = 6, colour = TsTe_noto2$y_colour),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 15),
legend.key=element_rect(fill="white"))
# Save
turnov_gen <- ggarrange2(noto_death, noto_birth, ncol = 2)
# Save
turnov_gen <- ggarrange2(noto_death, noto_birth, ncol = 2)
ggsave("./figures/supp_figs/Fig_turnover/Noto_turnover.png", turnov_gen, height = 10, width = 20, dpi = 400)
rm(list = ls())
dev.off()
# Save
turnov_gen <- ggarrange2(noto_death, noto_birth, ncol = 1)
################################################################################
# Name: 5bis-Faunal_Turnover.R
# Author: Lucas Buffan
# Contact: lucas.l.buffan@gmail.com
# Aim: Script for Ts/Te plots per family and genera for different groups
################################################################################
library(tidyverse)
library(deeptime)
library(ggpubr)
library(rphylopic)
library(readxl)
# Open species List
spl <- readRDS("./data_2023/SPECIES_LISTS/5-Fully_cleaned_EOT_SA_Mammals_SALMA_kept_Tropics_Diet.RDS")
# Function returning estimated age boundaries of a family
Ori_ext <- function(fam, gen_fam_tbl, TsTe_tbl, time = c("Ts", "Te")){
tmp_fam <- gen_fam_tbl %>% filter(family == fam)
TsTe_tmp <- TsTe_tbl %>% filter(genus %in% tmp_fam$genus)
if(time == "Ts"){
return(max(TsTe_tmp$ts))
}
else if(time == "Te"){
return(min(TsTe_tmp$te))
}
}
# GEOSCALES
# First geoscale
gsc1 <- deeptime::epochs
gsc1 <- gsc1 %>% filter(min_age < 56)
# Set second geoscale
gsc2 <- read_xlsx("./data_2023/time_bins/EarlyMidLate_epochs.xlsx")
gsc2 <- gsc2 %>% rename(min_age = "min_ma", max_age = "max_ma", name = "interval_name")
## NOTOUNGULATA ----------------------------------------------------------------
# TsTe info
TsTe_noto <- read.table("./results/SALMA_smoothed/genus_level/6-Order_level/Notoungulata/LTT/combined_10_KEEP_se_est.txt",
header = TRUE)
species_list_idx <- read.table("./data_2023/PyRate/RESTRICTED/SALMA_smoothed/genus_level/5-Order_level/Notoungulata_EOT_gen_occ_SALMA_smoothed_TaxonList.txt",
header = TRUE)
TsTe_noto <- TsTe_noto %>%
mutate(genus = species_list_idx$Species)
## 1) Ts-arranged genus plot
TsTe_noto1 <- TsTe_noto %>%
arrange(ts) %>%
mutate(family = sapply(X = genus, FUN = function(gen){
idx <- which(spl$genus == gen)
fam <- unique(spl$family[idx])
if(fam %in% c("Homalodotheriidae", "Hegetotheriidae", "Mesotheriidae", "Toxodontidae")){
return(fam)
}
else{
return("Others")
}
})) %>%
mutate(family = factor(family, levels = c("Homalodotheriidae", "Hegetotheriidae",
"Mesotheriidae", "Toxodontidae", "Others")))
# add colour vector for y axis
TsTe_noto1 <- TsTe_noto1 %>%
mutate(y_colour = sapply(X = 1:nrow(TsTe_noto1), FUN = function(i){
fam <- as.character(TsTe_noto1$family[i])
if(fam == "Homalodotheriidae"){
return("#49006a")
}
else if(fam == "Hegetotheriidae"){
return("#ae017e")
}
else if(fam == "Mesotheriidae"){
return("#f768a1")
}
else if(fam == "Toxodontidae"){
return("#9e9ac8")
}
else{
return("black")
}
}))
# proper plot
noto_birth <- TsTe_noto1 %>%
ggplot(aes(y = fct_inorder(genus), yend = fct_inorder(genus))) +
geom_segment(aes(x = ts, xend = te, colour = family), linewidth = 0.8) +
scale_colour_manual(values = c("#49006a", "#ae017e", "#f768a1", "#9e9ac8", "black")) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Genus", colour = "Family") +
# add silhouette
add_phylopic(x = 49.2, y = 11, name = "Trigonostylops", ysize = 8) +
annotate(geom = "text", x = 49, y = 5, label = "Notoungulata", size = 6) +
# highlight relevant birth events with rectangles
# geom_rect(aes(ymin = 46.5, ymax = 65.5, xmin = 35, xmax = 38.5), fill = "transparent", colour = "#08519c", linewidth = 0.7) +
# annotate(geom = "text", y = 56, x = 39.5, label = "(1)", size = 7, colour = "#08519c") +
# geom_rect(aes(ymin = 30.5, ymax = 46.5, xmin = 30, xmax = 34.5), fill = "transparent", colour = "#08519c", linewidth = 0.7) +
# annotate(geom = "text", y = 38, x = 35.5, label = "(2)", size = 7, colour = "#08519c") +
# EOT line
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
annotate(geom = "text", x = 32.5, y = 115, label = "EOT", size = 7, colour = "red") +
# Artificially extend plotting window
annotate(geom = "text", x = 35, y = 118.5, label = " ") +
annotate(geom = "text", x = 35, y = 0.5, label = " ") +
# GTS
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53)) +
theme(axis.text.y = element_text(size = 6, colour = TsTe_noto1$y_colour),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 15),
legend.key=element_rect(fill="white"))
## 2) Te-arranged genus plot
TsTe_noto2 <- TsTe_noto %>%
arrange(te) %>%
mutate(family = sapply(X = genus, FUN = function(gen){
idx <- which(spl$genus == gen)
fam <- unique(spl$family[idx])
if(fam %in% c("Archaeopithecidae", "Oldfieldthomasiidae", "Notostylopidae")){
return(fam)
}
else{
return("Others")
}
})) %>%
mutate(family = factor(family, levels = c("Archaeopithecidae", "Oldfieldthomasiidae",
"Notostylopidae", "Others")))
TsTe_noto2 <- TsTe_noto2 %>%
mutate(y_colour = sapply(X = 1:nrow(TsTe_noto2), FUN = function(i){
fam <- as.character(TsTe_noto2$family[i])
if(fam == "Archaeopithecidae"){
return("#993404")
}
else if(fam == "Oldfieldthomasiidae"){
return("#fe9929")
}
else if(fam == "Notostylopidae"){
return("#fc9272")
}
else{
return("black")
}
}))
noto_death <- TsTe_noto2 %>%
ggplot(aes(y = fct_inorder(genus), yend = fct_inorder(genus))) +
geom_segment(aes(x = ts, xend = te, colour = family), linewidth = 0.8) +
scale_colour_manual(values = c("#993404", "#fe9929", "#fc9272", "black")) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Genus", colour = "Family") +
# add silhouette
add_phylopic(x = 49.2, y = 11, name = "Trigonostylops", ysize = 8) +
annotate(geom = "text", x = 49, y = 5, label = "Notoungulata", size = 6) +
# highlight relevant birth events with rectangles
# geom_rect(aes(ymin = 82.5, ymax = 99.5, xmin = 37.5, xmax = 40.5), fill = "transparent", colour = "#a50f15", linewidth = 0.7) +
# annotate(geom = "text", y = 91, x = 36.5, label = "(1)", size = 7, colour = "#a50f15") +
# geom_rect(aes(ymin = 61.5, ymax = 82.5, xmin = 36, xmax = 32.2), fill = "transparent", colour = "#a50f15", linewidth = 0.7) +
# annotate(geom = "text", y = 72, x = 31.2, label = "(2)", size = 7, colour = "#a50f15") +
# EOT line
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
annotate(geom = "text", x = 32.5, y = 115, label = "EOT", size = 7, colour = "red") +
# Artificially extend plotting window
annotate(geom = "text", x = 35, y = 118.5, label = " ") +
annotate(geom = "text", x = 35, y = 0.5, label = " ") +
# GTS
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53)) +
theme(axis.text.y = element_text(size = 6, colour = TsTe_noto2$y_colour),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 18),
axis.text.x = element_text(size = 15),
legend.key=element_rect(fill="white"))
# Save
turnov_gen <- ggarrange2(noto_death, noto_birth, ncol = 1)
ggsave("./figures/supp_figs/Fig_turnover/Noto_turnover.png", turnov_gen, height = 10, width = 20, dpi = 400)
ggsave("./figures/supp_figs/Fig_turnover/Noto_turnover.png", turnov_gen, height = 20, width = 10, dpi = 400)
################################################################################
# Goal: Accessory functions to treat PyRate outputs
# Authors: Alexis Marion and Lucas Buffan
# Contact: Alexis.Marion@umontpellier.fr, Lucas.L.Buffan@gmail.com
################################################################################
library(dplyr)
## Extract values stored inside an R vectored opened as a text file ------------
split_vector <- function(str_vec){ #str_vec has to be a stringged vector, i.e "c(...)"
coma_split <- strsplit(str_vec, split = ",")[[1]]
#left parenthesis
coma_split[1] <- strsplit(coma_split[1],
split = "\\(")[[1]][2]
#right parenthesis
coma_split[length(coma_split)] <- strsplit(coma_split[length(coma_split)],
split = "\\)")[[1]][1]
#convert to numeric
vec_num <- as.numeric(coma_split)
return(vec_num)
}
## Extract diversification (origination and extinction) rates through time -----
extract_rtt <- function(path, ana = c("RJMCMC", "BDS")){ #path = PATH TO THE .R SCRIPT WRITTEN BY PyRate
#Raw output of PyRate
raw_script <- readLines(path, warn = FALSE)
if (ana == "RJMCMC"){
#Extracting time
time_all <- raw_script[grepl("time=", raw_script)] #all mentions of the same vector in the scipt (n=4)
time_str <- time_all[1] #could have been any index between 1 and 4
time_num <- split_vector(time_str) #convert to numeric
time_num <- -time_num #by default, negative
#Extracting mean estimates for origination, extinction and net diversification rates
rates <- raw_script[grepl("rate=", raw_script)] #1:origination, 2:extinction, 3:net_diversification, 4:longevity
sp_rate <- split_vector(rates[1])
ex_rate <- split_vector(rates[2])
net_rate <- split_vector(rates[3])
#Extracting max HPD for Sp and Ex rates
maxHPD <- raw_script[grepl("maxHPD=", raw_script)]
sp_maxHPD <- split_vector(maxHPD[1])
ex_maxHPD <- split_vector(maxHPD[2])
net_maxHPD <- split_vector(maxHPD[3])
#Extracting min HPD for Sp and Ex rates
minHPD <- raw_script[grepl("minHPD=", raw_script)]
sp_minHPD <- split_vector(minHPD[1])
ex_minHPD <- split_vector(minHPD[2])
net_minHPD <- split_vector(minHPD[3])
#Summarising and returning as a table
sp_df <- data.frame(time = time_num,
sp_rate = sp_rate,
sp_maxHPD = sp_maxHPD,
sp_minHPD = sp_minHPD)
ex_df <- data.frame(ex_rate = ex_rate,
ex_maxHPD = ex_maxHPD,
ex_minHPD = ex_minHPD)
net_df <- data.frame(net_rate = net_rate,
net_maxHPD = net_maxHPD,
net_minHPD = net_minHPD)
final <- cbind.data.frame(sp_df, ex_df, net_df)
return(final)
}
if (ana == "BDS"){
#Extracting mean estimates for origination, extinction and net diversification rates
rates <- raw_script[grepl("L_mean=", raw_script)]
sp_rate <- split_vector(rates[1])
rates <- raw_script[grepl("M_mean=", raw_script)]
ex_rate <- split_vector(rates[1])
rates <- raw_script[grepl("R_mean=", raw_script)]
net_rate <- split_vector(rates[1])
#Extracting max HPD for Sp and Ex rates
maxHPD <- raw_script[grepl("L_hpd_M95=", raw_script)]
sp_maxHPD <- split_vector(maxHPD[1])
maxHPD <- raw_script[grepl("M_hpd_M95=", raw_script)]
ex_maxHPD <- split_vector(maxHPD[1])
maxHPD <- raw_script[grepl("R_hpd_M95=", raw_script)]
net_maxHPD <- split_vector(maxHPD[1])
#Extracting min HPD for Sp and Ex rates
minHPD <- raw_script[grepl("L_hpd_m95=", raw_script)]
sp_minHPD <- split_vector(minHPD[1])
minHPD <- raw_script[grepl("M_hpd_m95=", raw_script)]
ex_minHPD <- split_vector(minHPD[1])
minHPD <- raw_script[grepl("R_hpd_m95=", raw_script)]
net_minHPD <- split_vector(minHPD[1])
#Extracting time
time <- raw_script[grepl("age=", raw_script)]
time_num<-abs(eval(parse(text=time)))
#Summarising and returning as a table
sp_df <- data.frame(time = time_num,
sp_rate = sp_rate,
sp_maxHPD = sp_maxHPD,
sp_minHPD = sp_minHPD)
ex_df <- data.frame(ex_rate = ex_rate,
ex_maxHPD = ex_maxHPD,
ex_minHPD = ex_minHPD)
net_df <- data.frame(net_rate = net_rate,
net_maxHPD = net_maxHPD,
net_minHPD = net_minHPD)
final <- cbind.data.frame(sp_df, ex_df, net_df)
return(final)
}
}
## Extract lineage-through-time and store them in a min, max, mean table -------
extract_ltt <- function(dir){ #dir = path to the DIRECTORY where LTT PER REPLICATE were stored
#target ltt tables per replicate
files <- Sys.glob(paste0(dir, "*_ltt.txt"))
#initialisation
ltt <- read.table(files[1], header = TRUE)
ltt$time <- unlist(lapply(X = ltt$time, FUN = round, digits = 1))
if(length(which(ltt$time > 500)) > 0){
ltt <- ltt[-which(ltt$time > 500), c("time", "diversity")]
}
else{
ltt <- ltt[, c("time", "diversity")]
}
ltt <- ltt %>% rename(diversity_1 = "diversity")
#iterative processing
i = 2
for(file in files[2:length(files)]){
f <- read.table(file, header = TRUE)
if(length(which(f$time > 500)) > 0){
f <- f[-which(f$time > 500), c("time", "diversity")]
}
else{
f <- f[, c("time", "diversity")]
}
f$time <- unlist(lapply(X = f$time, FUN = round, digits = 1))
colnames(f) <- c("time", paste0("diversity_", i))
ltt <- merge(ltt, f, by = "time", all = T)
i <- i+1
}
#Assess mean max min
LTT <- data.frame(Age = ltt$time,
Diversity = apply(X = ltt[,c(2:ncol(ltt))],
MARGIN = 1,
FUN = mean,
na.rm = TRUE),
min_Diversity = apply(X = ltt[,c(2:ncol(ltt))],
MARGIN = 1,
FUN = min,
na.rm = TRUE),
max_Diversity = apply(X = ltt[,c(2:ncol(ltt))],
MARGIN = 1,
FUN = max,
na.rm = TRUE))
return(LTT)
}
## Extract frequency of rate shift histogram table -----------------------------
extract_histo_tbl <- function(path){ #path = PATH TO THE .R SCRIPT WRITTEN BY PyRate
# Raw output from PyRate
raw_script <- readLines(path, warn = FALSE)
# Bayes factors (if freq rate shifts > bf2, significant support, if > bf6, strong support)
bf2 <- raw_script[grepl("bf2 = ", raw_script)]
bf2 <- as.numeric(strsplit(bf2, split = " = ")[[1]][2])
bf6 <- raw_script[grepl("bf6 = ", raw_script)]
bf6 <- as.numeric(strsplit(bf6, split = " = ")[[1]][2])
# Arbitrarily-chosen time bin's mid times (1: associated to origination rate, 2: to extinction rate)
mids <- raw_script[grepl("mids=", raw_script)]
mids_ori <- split_vector(mids[1])*(-1) #convert to positive
mids_ext <- split_vector(mids[2])*(-1)
# Freq rate shift (1: associated to origination rate, 2: to extinction rate)
counts <- raw_script[grepl("counts=", raw_script)]
counts_ori <- split_vector(counts[1])
counts_ext <- split_vector(counts[2])
# Create table and return
df <- data.frame(counts_ori = counts_ori,
counts_ext = counts_ext,
mids_ori = mids_ori,
mids_ext = mids_ext)
return(list(df, bf2, bf6))
}
extract_ltt("/home/lucas.buffan/Documents/GitHub/PhD/Chapter_1/results/SALMA_smoothed/genus_level/1-Full/LTT/per_replicate")
tbl <- extract_ltt(dir  = "/home/lucas.buffan/Documents/GitHub/PhD/Chapter_1/results/SALMA_smoothed/genus_level/1-Full/LTT/per_replicate")
tbl <- extract_ltt(dir  = "./results/SALMA_smoothed/genus_level/1-Full/LTT/per_replicate/")
View(tbl)
rm(list = ls())
