## 3) Families
spl %>%
filter(order == "Cingulata" & order == "Pilosa") %>%
distinct(family) %>%
filter(!is.na(family)) %>%
mutate(Ts = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = noto_genera, TsTe_tbl = TsTe_xen, time = "Ts"),
Te = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = noto_genera, TsTe_tbl = TsTe_xen, time = "Te")) %>%
arrange(Ts) %>%
ggplot(aes(y = fct_inorder(family), yend = fct_inorder(family))) +
geom_segment(aes(x = Ts, xend = Te), linewidth = 2) +
#  scale_colour_manual(values = c("black", "grey60")) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Family", colour = NULL) +
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
# annotate(geom = "text", x = 35, y = 16.5, label = " ") +
# annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53))
## 3) Families
spl %>%
filter(order == "Cingulata" & order == "Pilosa") %>%
distinct(family) %>%
filter(!is.na(family)) %>%
mutate(Ts = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = noto_genera, TsTe_tbl = TsTe_xen, time = "Ts"),
Te = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = noto_genera, TsTe_tbl = TsTe_xen, time = "Te"))
## 3) Families
spl %>%
filter(order == "Cingulata" | order == "Pilosa") %>%
distinct(family) %>%
filter(!is.na(family)) %>%
mutate(Ts = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = noto_genera, TsTe_tbl = TsTe_xen, time = "Ts"),
Te = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = noto_genera, TsTe_tbl = TsTe_xen, time = "Te")) %>%
arrange(Ts) %>%
ggplot(aes(y = fct_inorder(family), yend = fct_inorder(family))) +
geom_segment(aes(x = Ts, xend = Te), linewidth = 2) +
#  scale_colour_manual(values = c("black", "grey60")) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Family", colour = NULL) +
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
# annotate(geom = "text", x = 35, y = 16.5, label = " ") +
# annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53))
spl %>%
filter(order == "Cingulata" | order == "Pilosa") %>%
distinct(family) %>%
filter(!is.na(family)) %>%
mutate(Ts = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = xen_genera, TsTe_tbl = TsTe_xen, time = "Ts"),
Te = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = xen_genera, TsTe_tbl = TsTe_xen, time = "Te")) %>%
arrange(Ts) %>%
ggplot(aes(y = fct_inorder(family), yend = fct_inorder(family))) +
geom_segment(aes(x = Ts, xend = Te), linewidth = 2) +
#  scale_colour_manual(values = c("black", "grey60")) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Family", colour = NULL) +
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
# annotate(geom = "text", x = 35, y = 16.5, label = " ") +
# annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53))
## 3) Families
xen_genera <- spl %>%
filter(order == "Xenarthra") %>%
group_by(family, genus) %>%
distinct(genus)
spl %>%
filter(order == "Cingulata" | order == "Pilosa") %>%
distinct(family) %>%
filter(!is.na(family)) %>%
mutate(Ts = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = xen_genera, TsTe_tbl = TsTe_xen, time = "Ts"),
Te = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = xen_genera, TsTe_tbl = TsTe_xen, time = "Te")) %>%
arrange(Ts) %>%
ggplot(aes(y = fct_inorder(family), yend = fct_inorder(family))) +
geom_segment(aes(x = Ts, xend = Te), linewidth = 2) +
#  scale_colour_manual(values = c("black", "grey60")) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Family", colour = NULL) +
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
# annotate(geom = "text", x = 35, y = 16.5, label = " ") +
# annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53))
View(xen_genera)
## 3) Families
xen_genera <- spl %>%
filter(order %in% c("Cingulata", "Pilosa")) %>%
group_by(family, genus) %>%
distinct(genus)
spl %>%
filter(order %in% c("Cingulata", "Pilosa")) %>%
distinct(family) %>%
filter(!is.na(family)) %>%
mutate(Ts = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = xen_genera, TsTe_tbl = TsTe_xen, time = "Ts"),
Te = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = xen_genera, TsTe_tbl = TsTe_xen, time = "Te")) %>%
arrange(Ts) %>%
ggplot(aes(y = fct_inorder(family), yend = fct_inorder(family))) +
geom_segment(aes(x = Ts, xend = Te), linewidth = 2) +
#  scale_colour_manual(values = c("black", "grey60")) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Family", colour = NULL) +
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
# annotate(geom = "text", x = 35, y = 16.5, label = " ") +
# annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53))
spl %>%
filter(order %in% c("Cingulata", "Pilosa")) %>%
distinct(family) %>%
filter(!is.na(family)) %>%
mutate(Ts = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = xen_genera, TsTe_tbl = TsTe_xen, time = "Ts"),
Te = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = xen_genera, TsTe_tbl = TsTe_xen, time = "Te")) %>%
arrange(Ts) %>%
ggplot(aes(y = fct_inorder(family), yend = fct_inorder(family))) +
geom_segment(aes(x = Ts, xend = Te), linewidth = 2) +
#  scale_colour_manual(values = c("black", "grey60")) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Family", colour = NULL) +
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
annotate(geom = "text", x = 35, y = 9.5, label = " ") +
annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53))
## Metatheria ------------------------------------------------------------------
rm(species_list_idx, xen_genera, TsTe_xen)
TsTe_met <- read.table("./results/SALMA_smoothed/genus_level/6-Order_level/Xenarthra/LTT/combined_10_KEEP_se_est.txt", header = T)
species_list_idx <- read.table("./data_2023/PyRate/SALMA_smoothed/genus_level/5-Order_level/Xenarthra_EOT_gen_occ_SALMA_smoothed_TaxonList.txt", header = T)
TsTe_met <-TsTe_met %>% mutate(genus = species_list_idx$Species)
## 1) Ts-arranged genus plot
TsTe_met %>%
arrange(ts) %>%
ggplot(aes(y = fct_inorder(genus), yend = fct_inorder(genus))) +
geom_segment(aes(x = ts, xend = te)) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Genus") +
# geom_rect(aes(ymin = 46.5, ymax = 65.5, xmin = 35, xmax = 38.5), fill = "transparent", colour = "#08519c", linewidth = 0.7) +
# annotate(geom = "text", y = 56, x = 39, label = "(1)", size = 7, colour = "#08519c") +
# geom_rect(aes(ymin = 30.5, ymax = 46.5, xmin = 30, xmax = 34.5), fill = "transparent", colour = "#08519c", linewidth = 0.7) +
# annotate(geom = "text", y = 38, x = 35, label = "(2)", size = 7, colour = "#08519c") +
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
#  annotate(geom = "text", x = 35, y = 36.5, label = " ") +
annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53))
TsTe_met <- read.table("./results/SALMA_smoothed/genus_level/6-Order_level/Metatheria/LTT/combined_10_KEEP_se_est.txt", header = T)
species_list_idx <- read.table("./data_2023/PyRate/SALMA_smoothed/genus_level/5-Order_level/Metatheria_EOT_gen_occ_SALMA_smoothed_TaxonList.txt", header = T)
TsTe_met <-TsTe_met %>% mutate(genus = species_list_idx$Species)
## 1) Ts-arranged genus plot
TsTe_met %>%
arrange(ts) %>%
ggplot(aes(y = fct_inorder(genus), yend = fct_inorder(genus))) +
geom_segment(aes(x = ts, xend = te)) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Genus") +
# geom_rect(aes(ymin = 46.5, ymax = 65.5, xmin = 35, xmax = 38.5), fill = "transparent", colour = "#08519c", linewidth = 0.7) +
# annotate(geom = "text", y = 56, x = 39, label = "(1)", size = 7, colour = "#08519c") +
# geom_rect(aes(ymin = 30.5, ymax = 46.5, xmin = 30, xmax = 34.5), fill = "transparent", colour = "#08519c", linewidth = 0.7) +
# annotate(geom = "text", y = 38, x = 35, label = "(2)", size = 7, colour = "#08519c") +
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
annotate(geom = "text", x = 35, y = 36.5, label = " ") +
annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53))
## 2) Te-arranged genus plot
TsTe_met %>%
arrange(te) %>%
ggplot(aes(y = fct_inorder(genus), yend = fct_inorder(genus))) +
geom_segment(aes(x = ts, xend = te)) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Genus") +
# geom_rect(aes(ymin = 46.5, ymax = 65.5, xmin = 35, xmax = 38.5), fill = "transparent", colour = "#08519c", linewidth = 0.7) +
# annotate(geom = "text", y = 56, x = 39, label = "(1)", size = 7, colour = "#08519c") +
# geom_rect(aes(ymin = 30.5, ymax = 46.5, xmin = 30, xmax = 34.5), fill = "transparent", colour = "#08519c", linewidth = 0.7) +
# annotate(geom = "text", y = 38, x = 35, label = "(2)", size = 7, colour = "#08519c") +
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
annotate(geom = "text", x = 35, y = 36.5, label = " ") +
annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53))
## 3) Families
met_genera <- spl %>%
filter(order %in% c("Paucituberculata", "Polydolopimorphia", "Didelphimorphia", "Microbiotheria", "Sparassodonta")) %>%
group_by(family, genus) %>%
distinct(genus)
spl %>%
filter(order %in% c("Paucituberculata", "Polydolopimorphia", "Didelphimorphia", "Microbiotheria", "Sparassodonta")) %>%
distinct(family) %>%
filter(!is.na(family)) %>%
mutate(Ts = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = xen_genera, TsTe_tbl = TsTe_xen, time = "Ts"),
Te = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = xen_genera, TsTe_tbl = TsTe_xen, time = "Te")) %>%
arrange(Ts) %>%
ggplot(aes(y = fct_inorder(family), yend = fct_inorder(family))) +
geom_segment(aes(x = Ts, xend = Te), linewidth = 2) +
#  scale_colour_manual(values = c("black", "grey60")) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Family", colour = NULL) +
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
# annotate(geom = "text", x = 35, y = 9.5, label = " ") +
annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53))
spl %>%
filter(order %in% c("Paucituberculata", "Polydolopimorphia", "Didelphimorphia", "Microbiotheria", "Sparassodonta")) %>%
distinct(family) %>%
filter(!is.na(family)) %>%
mutate(Ts = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = met_genera, TsTe_tbl = TsTe_xen, time = "Ts"),
Te = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = met_genera, TsTe_tbl = TsTe_xen, time = "Te")) %>%
arrange(Ts) %>%
ggplot(aes(y = fct_inorder(family), yend = fct_inorder(family))) +
geom_segment(aes(x = Ts, xend = Te), linewidth = 2) +
#  scale_colour_manual(values = c("black", "grey60")) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Family", colour = NULL) +
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
# annotate(geom = "text", x = 35, y = 9.5, label = " ") +
annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53))
spl %>%
filter(order %in% c("Paucituberculata", "Polydolopimorphia", "Didelphimorphia", "Microbiotheria", "Sparassodonta")) %>%
distinct(family) %>%
filter(!is.na(family)) %>%
mutate(Ts = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = met_genera, TsTe_tbl = TsTe_met, time = "Ts"),
Te = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = met_genera, TsTe_tbl = TsTe_met, time = "Te")) %>%
arrange(Ts) %>%
ggplot(aes(y = fct_inorder(family), yend = fct_inorder(family))) +
geom_segment(aes(x = Ts, xend = Te), linewidth = 2) +
#  scale_colour_manual(values = c("black", "grey60")) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Family", colour = NULL) +
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
# annotate(geom = "text", x = 35, y = 9.5, label = " ") +
annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53))
spl %>%
filter(order %in% c("Paucituberculata", "Polydolopimorphia", "Didelphimorphia", "Microbiotheria", "Sparassodonta")) %>%
distinct(family) %>%
filter(!is.na(family)) %>%
mutate(Ts = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = met_genera, TsTe_tbl = TsTe_met, time = "Ts"),
Te = sapply(X = family, FUN = Ori_ext, gen_fam_tbl = met_genera, TsTe_tbl = TsTe_met, time = "Te")) %>%
arrange(Ts) %>%
ggplot(aes(y = fct_inorder(family), yend = fct_inorder(family))) +
geom_segment(aes(x = Ts, xend = Te), linewidth = 2) +
#  scale_colour_manual(values = c("black", "grey60")) +
scale_x_reverse(breaks = seq(from = 25, to = 50, by = 5)) +
labs(x = "Time (Ma)", y = "Family", colour = NULL) +
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) +
annotate(geom = "text", x = 35, y = 13.5, label = " ") +
annotate(geom = "text", x = 35, y = 0.5, label = " ") +
coord_geo(pos = list("bottom", "bottom"),
dat = list(gsc2, gsc1),
abbrv = list(T, F),
center_end_labels = TRUE,
height = unit(1.5, "line"),
size = "auto",
xlim = c(24, 53))
library(tidyverse)
library(hash)
library(ggplot2)
library(stringr)
## Define covariable names -----------------------------------------------------
covar_idx <- hash("0" = "Self-diversity",
"1" = "Plant_diversity",
"2" = "Andes_elevation",
"3" = "Temperature",
"4" = "Atmospheric_carbon",
"5" = "Organic_carbon",
"6" = "Sea_level")
covar_idx_diet <- hash("0" = "Self-diversity",
"1" = "Plant_diversity",
"2" = "Andes_elevation",
"3" = "Temperature",
"4" = "Atmospheric_carbon",
"5" = "Organic_carbon",
"6" = "Sea_level",
"7" = "Carnivorous_diversity",
"8" = "Insectivorous_diversity",
"9" = "Omnivorous_diversity")
rm(list = ls())
library(tidyverse)
library(hash)
library(ggplot2)
library(stringr)
## Define covariable names -----------------------------------------------------
covar_idx <- hash("0" = "Self-diversity",
"1" = "Plant_diversity",
"2" = "Andes_elevation",
"3" = "Temperature",
"4" = "Atmospheric_carbon",
"5" = "Organic_carbon",
"6" = "Sea_level")
covar_idx_diet <- hash("0" = "Self-diversity",
"1" = "Plant_diversity",
"2" = "Andes_elevation",
"3" = "Temperature",
"4" = "Atmospheric_carbon",
"5" = "Organic_carbon",
"6" = "Sea_level",
"7" = "Carnivorous_diversity",
"8" = "Insectivorous_diversity",
"9" = "Omnivorous_diversity")
## BIG ASS LOOP ----------------------------------------------------------------
dirs <- c(
#        "1-Full/post_EECO", "1-Full/Oligocene_only",
"4-Tropical_Extratropical/Tropical/post_EECO", "4-Tropical_Extratropical/Tropical/Oligocene_only",
"4-Tropical_Extratropical/Extratropical/post_EECO", "4-Tropical_Extratropical/Extratropical/Oligocene_only"
#        , "5-Ecomorphotype/herbivore/post_EECO", "5-Ecomorphotype/herbivore/Oligocene"
)
intervals <- c("Eocene", "Oligocene"
#               , "Eocene", "Oligocene"
)
#initialise large tables
PLOT_DF <- data.frame(param = NA, rate = NA, col = NA, signif_col = NA, value = NA, interval = NA, dat = NA)
SIGNIF_DF <- data.frame(param = NA, rate = NA, col = NA, max_val = NA, min_val = NA, star_pos = NA, interval = NA, dat = NA)
j <- 1
for(dir in dirs){
dat <- strsplit(dir, "/")[[1]][1]
# MCMC recap table
recap_tbl <- read.table(paste0("./results/MBD/", dir, "/ESS_summary.txt"),
sep = "\t", header = TRUE)
#remove runs that did not converge from recap_tbl
if(length(which(recap_tbl$ESS_posterior < 200)) > 0){
recap_tbl <- recap_tbl[-which(recap_tbl$ESS_posterior < 200), ]
}
n_conv <- nrow(recap_tbl) #number of runs that converged, useful as in the name of the combined mcmc log file
#add the mean row in last position
recap_tbl[nrow(recap_tbl)+1, ] <- apply(X = recap_tbl, MARGIN = 2, FUN = mean, na.rm = TRUE)
#subset mean Shrinkage Weights (SW)
mean_SW <- recap_tbl %>% select(starts_with("Mean_W"))
#Open combined mcmc.log file and retain the distributions of the selected G
mcmcLog <- read.table(paste0("./results/MBD/", dir, "/combined_", n_conv, "_KEEP.log"),
header = TRUE, sep = "\t")
mcmcLog <- mcmcLog %>% select(starts_with("G")) #only retain correlation parameters
## 1) get column names of the SW > 0.5 ---------------------------------------
ns_names <- colnames(mean_SW)[which(mean_SW[nrow(mean_SW), ] < 0.5)] #remember that the last one is the total
mean_SW_sign <- mean_SW[, !(colnames(mean_SW) %in% ns_names)]
#go back to the corresponding variable
end_nm <- function(name){
spl <- strsplit(name, split = "")[[1]]
spl <- spl[(length(spl)-3):length(spl)]
return(paste0("G", spl[1], spl[2], spl[3], spl[4])) #the "G" stands for the corr
}
corr_vbl <- sapply(X = colnames(mean_SW_sign),
FUN = end_nm)
#subset
if(length(corr_vbl) == 0){ # if no variable found with SW > 0.5, don't go further
cat("\nNo significant correlation coefficient found.\n")
recap_tbl_sign <- NULL
}
if(length(corr_vbl) > 0){
mcmcLog_sign <- mcmcLog %>% select(all_of(corr_vbl))
# 2) check if zero is in the 95% HPD
zeros <- c()
for(G in colnames(mcmcLog_sign)){
#5 and 95% quantiles of the distribution
Q <- as.numeric(quantile(mcmcLog_sign[, G], probs = c(0.025, 0.975)))
if(length(unique(sign(Q))) > 1){ #if these boundaries have different signs, i.e. 0 is in 95% HPD
small_abs <- min(abs(Q))
#in case the distribution is skewed and only a TINY part of the 95% HPD includes 0
if(small_abs >= 0.01){ #we consider small_abs small enough if smaller than 1e-2
zeros <- c(zeros, G)
}
}
}
#remove variables including zero in their 95% HPD from the list of the significant variables
if(length(zeros) > 0){
zeros <- str_replace(zeros, "Mean_W", "G") #otherwise names don't match
corr_vbl <- corr_vbl[-which(corr_vbl %in% zeros)]
if(length(corr_vbl) == 0){
message("\nNo significant correlation coefficient found.\n")
}
}
}
# 3) reformat dataset for plotting
value <- mcmcLog[, 1]
param <- rep(0, nrow(mcmcLog))
col <- rep(colnames(mcmcLog)[1], nrow(mcmcLog))
if("l" %in% strsplit(colnames(mcmcLog)[1], "")[[1]]){ #lambda
rate <- rep("Origination", length(mcmcLog[, 1]))
}
if("m" %in% strsplit(colnames(mcmcLog)[1], "")[[1]]){ #mu
rate <- rep("Extinction", length(mcmcLog[, 1]))
}
#specify whether parameter associated to origination or extinction rate
for(i in colnames(mcmcLog)[-1]){
col <- c(col, rep(i, nrow(mcmcLog)))
value <- c(value, mcmcLog[, i])
p <- strsplit(i, split = "_")[[1]][2]
param <- c(param, rep(as.numeric(p), nrow(mcmcLog)))
if("l" %in% strsplit(i, "")[[1]]){ #lambda
rate <- c(rate, rep("Origination", nrow(mcmcLog)))
}
else if("m" %in% strsplit(i, "")[[1]]){ #mu
rate <- c(rate, rep("Extinction", nrow(mcmcLog)))
}
}
plot_df <- data.frame(param = param, rate = rate, col = col, value = value)
#significance dataframe
if(length(corr_vbl) > 0){ #if we have significant correlation coefficients
signif_df <- plot_df %>%
mutate(col = ifelse(col %in% corr_vbl, "*", NA)) %>% #if the correlation coefficient was found significant, we add a star
group_by(param, rate, col) %>%
summarise(max_val = max(density(value)[[1]]),
min_val = min(density(value)[[1]])) %>%
#adjust star position
mutate(star_pos = ifelse(abs(max_val) >= abs(min_val),
max_val + sign(max_val)*0.5,
min_val + sign(min_val)*0.5))
}
if(length(corr_vbl) == 0){ #if no coefficient was found significant
signif_df <- plot_df %>%
mutate(col = NA) %>% #if the correlation coefficient was found significant, we add a star
group_by(param, rate, col) %>%
summarise(max_val = max(density(value)[[1]]),
min_val = min(density(value)[[1]])) %>%
mutate(star_pos = ifelse(abs(max_val) >= abs(min_val),
max_val + sign(max_val)*0.5,
min_val + sign(min_val)*0.5))
}
signif_df <- signif_df %>% add_column(interval = rep(intervals[j], nrow(signif_df)),
dat = rep(dat, nrow(signif_df)))
# Create a column indicating (or not) significance of each coefficient (for colour attribution)
attrib_sign <- function(idx){
corr_idx <- which(signif_df$rate == plot_df$rate[idx] &
signif_df$param == plot_df$param[idx])
type <- signif_df$rate[corr_idx] # Extinction or Origination
signif <- signif_df$col[corr_idx] # "*" or NA
if(type == "Extinction" & is.na(signif)){
return("Ext_ns")
}
else if(type == "Extinction" & signif == "*"){
return("Ext_signif")
}
else if(type == "Origination" & is.na(signif)){
return("Ori_ns")
}
else if(type == "Origination" & signif == "*"){
return("Ori_signif")
}
}
sign_col <- sapply(X = 1:nrow(plot_df), FUN = attrib_sign)
plot_df <- plot_df %>% add_column(signif_col = sign_col,
interval = rep(intervals[j], nrow(plot_df)),
dat = rep(dat, nrow(plot_df)),
.after = "col")
# Extend the big berthas
PLOT_DF <- rbind.data.frame(PLOT_DF, plot_df)
SIGNIF_DF <- rbind.data.frame(SIGNIF_DF, signif_df)
j <- j+1
}
View(PLOT_DF)
rm(list = ls())
