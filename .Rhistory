occdf$loc[which(occdf$loc > 1)] <- "E" #Extra-tropical
occdf$loc[which(occdf$loc == 1)] <- "T"
# Indicative message
message(paste0("Proportion of Tropical occurrences: ", round(length(which(occdf1$loc == "T"))/nrow(occdf1), digits = 2) ))
# Indicative message
message(paste0("Proportion of Tropical occurrences: ", round(length(which(occdf$loc == "T"))/nrow(occdf), digits = 2) ))
message(paste0("Proportion of Extra-tropical occurrences: ", round(length(which(occdf$loc == "E"))/nrow(occdf), digits = 2) ))
message(paste0("Proportion of occurrences with unassigned affinity: ", round(length(which(is.na(occdf$loc)))/nrow(occdf), digits = 2) ))
length(which(raw$diet == "carnivore, durophage"))
length(which(raw$diet == "carnivore, suspension feeder"))
length(which(raw$diet == "frugivore, folivore"))
length(which(raw$diet == "frugivore, herbivore"))
length(which(raw$diet == "frugivore, omni"))
length(which(raw$diet == "frugivore, omnivore"))
#-------------------------------------------------------------------------------
############################# 'Diet' Assignment ################################
#-------------------------------------------------------------------------------
# Simplify diet categories
diet_ref <- raw %>%
group_by(genus, diet) %>%
distinct(genus)
diet_cat <- hash("carnivore, durophage" = "carnivore", # 1 occurrence
"carnivore, suspension feeder" = "carnivore", # 19 occurrences
"frugivore, folivore" = "herbivore", # 236 occurrences
"frugivore, herbivore" = "herbivore", # 21 occurrences
"frugivore, omnivore" = "omnivore") # 27 occurrences
library(hash)
diet_cat <- hash("carnivore, durophage" = "carnivore", # 1 occurrence
"carnivore, suspension feeder" = "carnivore", # 19 occurrences
"frugivore, folivore" = "herbivore", # 236 occurrences
"frugivore, herbivore" = "herbivore", # 21 occurrences
"frugivore, omnivore" = "omnivore") # 27 occurrences
for(cat in keys(diet_cat)){
idx <- which(diet_ref$diet == cat)
diet_ref$diet[idx] <- values(diet_cat[cat])[[1]]
}
length(unique(raw$genus)) == nrow(diet_ref)
length(unique(raw$genus))
View(diet_ref)
length(unique(raw$diet))
unique(raw$diet)
eot <- occdf %>% filter(epoch %in% c("Eocene", "Oligocene"))
View(raw)
eot <- raw %>% filter((min_ma > 23.03) & (min_ma < 56) & (max_ma > 23) & (min_ma < 56))
unique(eot$diet)
unique(diet_ref$diet)
View(diet_ref)
length(unique(diet_ref$genus))
A <- count(diet_ref$genus)
A <- count(diet_ref)
View(A)
diet_ref1 <- diet_ref
diet_ref1$diet <- 1
A <- count(diet_ref1)
which(A$n > 1)
View(diet_ref1[which(A$n>1)])
View(diet_ref1[which(A$n>1),])
View(diet_ref[which(A$n>1),])
unique(raw$diet)
#Backtrace (for newly-entered occurrences, without collection number)
source("./R/Updated_Pipeline/2b-Backtrace_coords.R")
#-------------------------------------------------------------------------------
############################# 'Diet' Assignment ################################
#-------------------------------------------------------------------------------
# Simplify diet categories (for the EOT occurences only)
diet_ref <- raw %>%
group_by(genus, diet) %>%
distinct(genus)
for(cat in keys(diet_cat)){ #diet_cat imported from 2b-
idx <- which(diet_ref$diet == cat)
diet_ref$diet[idx] <- values(diet_cat[cat])[[1]]
}
rm(diet_ref1)
View(diet_ref)
# Assign proper "diets"
assign_diet <- function(genus){
if(genus %in% dat2$genus){
idx <- which(dat2$genus == genus)
return(dat2$diet[idx])
}
else{
return(NA)
}
}
# Assign proper "diets"
assign_diet <- function(genus){
if(genus %in% diet_ref$genus){
idx <- which(diet_ref$genus == genus)
return(diet_ref$diet[idx])
}
else{
return(NA)
}
}
spl$diet <- unlist(lapply(X = spl$genus, FUN = assign_diet))
occdf$diet <- sapply(X = occdf$genus, FUN = assign_diet)
View(occdf)
rm(list = ls())
library(tidyverse)
library(raster)
library(sp)
library(hash)
#-------------------------------------------------------------------------------
############################ Tropical Assignment ###############################
#-------------------------------------------------------------------------------
## Load data -------------------------------------------------------------------
#occurrence data
occdf <- readRDS("./data_2023/SPECIES_LISTS/3-Fully_cleaned_Cnz_SA_mammals_SALMA_kept.RDS")
occdf$min_ma <- as.numeric(occdf$min_ma)
occdf$max_ma <- as.numeric(occdf$max_ma)
#raw dataset containing position information
raw <- read.csv("./data_2023/SPECIES_LISTS/1-Raw_Cnz_SA_Mammals.csv")
coord_ref <- raw %>%
group_by(collection_no, lng, lat) %>%
distinct(collection_no)
#Associate each collection to its coordinates
occdf <- occdf %>%
left_join(coord_ref)
#Backtrace (for newly-entered occurrences, without collection number)
source("./R/Updated_Pipeline/2b-Backtrace_coords.R")
## Create mid_ma column (mid age, for palaeorotation) --------------------------
occdf$age <- sapply(X = 1:nrow(occdf),
FUN = function(x){
M <- (occdf$max_ma[x] + occdf$min_ma[x])/2
return(M)
})
## Palaeorotate using the PALEOMAP Global Plate Model --------------------------
to_rot <- data.frame(lng = occdf$lng,
lat = occdf$lat,
age = occdf$age,
genus = occdf$genus)
to_rot <- palaeorotate(occdf = to_rot,
lng = "lng",
lat = "lat",
age = "age",
model = "PALEOMAP",
method = "point",
uncertainty = FALSE)
occdf <- occdf %>%
add_column(p_lng = to_rot$p_lng, p_lat = to_rot$p_lat, .after = "lat") %>%
filter(!(is.na(p_lat))) #filter out the 3 occurrences we couldn't palaeorotate
## Proceed to actual tropical assignment ---------------------------------------
#function to find closest lat in a given lat vect
closest <- function(lat, ref_lats){
DisT <- abs(ref_lats - lat)
return(which.min(DisT))
}
#crazy loop
occdf$loc <- NA #loc will be either "E" for "Extra tropical" or "T" for "Tropical"
for(t in seq(from = 5, to = 60, by = 5)){
idx <- which((occdf$age < t) & (is.na(occdf$loc)))
corr_map <- raster(paste0("../../paleoTropics/paleoTropics/Ma_", (t-5), "_moll.grd"))
# Super weird coordinates => retrieve proportionality factor with true things in degrees
ext <- extent(corr_map)
f_long <- ext[2]/180
f_lat <- ext[4]/90
# Build spatial data point object
xy <- cbind(occdf$p_lng[idx]*f_long, occdf$p_lat[idx]*f_lat)
xy[,1] <- sapply(X = xy[,1], FUN = function(x){return(x+10*f_long)})
sp <- SpatialPoints(xy, proj4string = crs(corr_map))
# plot(corr_map)
# plot(sp, add = TRUE)
val <- raster::extract(corr_map, sp, method = 'bilinear')
xyz <- cbind(xy, val)
# Backtrace and attribute to NAs the value of the closest cell in terms of lat
ref_lats <- xyz[which(is.na(xyz[,3]) == FALSE),2]
for(dx in which(is.na(xyz[,3]))){
closest_idx <- closest(xyz[dx,2], ref_lats)
subst <- xyz[which(xyz[,2] == ref_lats[closest_idx]) ,3][1]
xyz[dx,3] <- subst
}
occdf$loc[idx] <- xyz[,3]
}
occdf$loc[which(occdf$loc > 1)] <- "E" #Extra-tropical
occdf$loc[which(occdf$loc == 1)] <- "T"
# Indicative message
message(paste0("Proportion of Tropical occurrences: ", round(length(which(occdf$loc == "T"))/nrow(occdf), digits = 2) ))
message(paste0("Proportion of Extra-tropical occurrences: ", round(length(which(occdf$loc == "E"))/nrow(occdf), digits = 2) ))
message(paste0("Proportion of occurrences with unassigned affinity: ", round(length(which(is.na(occdf$loc)))/nrow(occdf), digits = 2) ))
#-------------------------------------------------------------------------------
############################# 'Diet' Assignment ################################
#-------------------------------------------------------------------------------
# Simplify diet categories
diet_ref <- raw %>%
group_by(genus, diet) %>%
distinct(genus)
for(cat in keys(diet_cat)){ #diet_cat imported from 2b-
idx <- which(diet_ref$diet == cat)
diet_ref$diet[idx] <- values(diet_cat[cat])[[1]]
}
occdf1 <- occdf
# Assign proper "diets"
assign_diet <- function(genus){
if(genus %in% diet_ref$genus){
idx <- which(diet_ref$genus == genus)
return(diet_ref$diet[idx])
}
else{
return(NA)
}
}
occdf$diet <- sapply(X = occdf$genus, FUN = assign_diet)
rm(occdf1)
occdf1 <- occdf
# modifications done after one-by-one checking of the remaining unassigned occurrences
occdf$diet[which( (is.na(occdf$diet)) & (occdf$order %in% c("Notoungulata", "Astrapotheria")))] <- "herbivore"
occdf$diet[which( (is.na(occdf$diet)) & (occdf$order == "Sparassodonta"))] <- "carnivore"
occdf$diet[which( (is.na(occdf$diet)) & (occdf$order == "Rodentia"))] <- "herbivore"
occdf$diet[which( (is.na(occdf$diet)) & (occdf$order == "Cingulata"))] <- "omnivore"
occdf$diet[which( (is.na(occdf$diet)) & (occdf$family %in% c("Argyrolagidae",
"Polydolopidae",
"Prepidolopidae",
"Palaeothentidae")))] <- "omnivore"
occdf$diet[which(occdf$genus == "cf. Perulestes")] <- "insectivore"
occdf$diet[which(occdf$genus == "Patagonia")] <- "herbivore"
View(occdf[which(is.na(occdf$diet)),])
View(occdf)
occdf$diet <- sapply(X = occdf$genus, FUN = assign_diet)
# modifications done after one-by-one checking of the remaining unassigned occurrences
occdf$diet[which( (is.na(occdf$diet)) & (occdf$order %in% c("Notoungulata", "Astrapotheria")))] <- "herbivore"
occdf$diet[which( (is.na(occdf$diet)) & (occdf$order == "Sparassodonta"))] <- "carnivore"
occdf$diet[which( (is.na(occdf$diet)) & (occdf$order %in% c("Rodentia", "Pilosa") ))] <- "herbivore"
occdf$diet[which( (is.na(occdf$diet)) & (occdf$order == "Cingulata"))] <- "omnivore"
occdf$diet[which( (is.na(occdf$diet)) & (occdf$family %in% c("Argyrolagidae",
"Polydolopidae",
"Prepidolopidae",
"Palaeothentidae")))] <- "omnivore"
occdf$diet[which( (is.na(occdf$diet)) & (occdf$family %in% c("Felidae", "Canidae")))] <- "carnivore"
occdf$diet[which( (is.na(occdf$diet)) & (occdf$family == "Cervidae"))] <- "herbivore"
occdf$diet[which(occdf$genus == "cf. Perulestes")] <- "insectivore"
occdf$diet[which(occdf$genus == "Patagonia")] <- "herbivore"
occdf$diet[which(occdf$genus == "Neosaimiri")] <- "omnivore"
occdf$diet[which(occdf$genus == "cf. Aotus")] <- "omnivore"
occdf$diet[which(occdf$genus == "Callicebus")] <- "frugivore"
View(spl[which(is.na(spl$diet)),])
View(occdf[which(is.na(occdf$diet)),])
occdf$diet <- sapply(X = occdf$genus, FUN = assign_diet)
# modifications done after one-by-one checking of the remaining unassigned occurrences
occdf$diet[which( (is.na(occdf$diet)) & (occdf$order %in% c("Notoungulata", "Astrapotheria")))] <- "herbivore"
occdf$diet[which( (is.na(occdf$diet)) & (occdf$order %in% c("Sparassodonta", "Carnivora")))] <- "carnivore"
occdf$diet[which( (is.na(occdf$diet)) & (occdf$order %in% c("Rodentia", "Pilosa") ))] <- "herbivore"
occdf$diet[which( (is.na(occdf$diet)) & (occdf$order == "Cingulata"))] <- "omnivore"
occdf$diet[which( (is.na(occdf$diet)) & (occdf$family %in% c("Argyrolagidae",
"Polydolopidae",
"Prepidolopidae",
"Palaeothentidae")))] <- "omnivore"
occdf$diet[which( (is.na(occdf$diet)) & (occdf$family == "Cervidae"))] <- "herbivore"
occdf$diet[which(occdf$genus == "cf. Perulestes")] <- "insectivore"
occdf$diet[which(occdf$genus == "Patagonia")] <- "herbivore"
occdf$diet[which(occdf$genus == "Neosaimiri")] <- "omnivore"
occdf$diet[which(occdf$genus == "cf. Aotus")] <- "omnivore"
occdf$diet[which(occdf$genus == "Callicebus")] <- "frugivore"
View(occdf[which(is.na(occdf$diet)),])
#-------------------------------------------------------------------------------
##################### Save the whole occurrence dataframe ######################
#-------------------------------------------------------------------------------
saveRDS(occdf, "./data_2023/SPECIES_LISTS/3-Matched_Uncleaned_Cnz_SA_Mammals_Tropics_Diet.RDS")
#-------------------------------------------------------------------------------
##################### Save the whole occurrence dataframe ######################
#-------------------------------------------------------------------------------
saveRDS(occdf, "./data_2023/SPECIES_LISTS/3-Fully_cleaned_Cnz_SA_mammals_SALMA_kept_Tropics_Diet.RDS")
# EOT
all_cleaned_EOT <- occdf %>% filter(epoch %in% c("Eocene", "Oligocene"))
#save
saveRDS(all_cleaned_EOT, "./data_2023/SPECIES_LISTS/5-Fully_cleaned_EOT_SA_Mammals_SALMA_kept_Tropics_Diet.RDS")
rm(list = ls())
library(readxl)
library(tidyverse)
library(palaeoverse)
## Load data -------------------------------------------------------------------
SubEpochs <- read_xlsx("./data_2023/time_bins/EarlyMidLate_epochs.xlsx")
SubEpochs$bin <- 1:nrow(SubEpochs) #add 'bin' columns for `bin_time`
SALMA_EOT <- read_xlsx("./data_2023/time_bins/SALMA_EOT.xlsx")
species_list <- readRDS("./data_2023/SPECIES_LISTS/5-Fully_cleaned_EOT_SA_Mammals_SALMA_kept_Tropics_Diet.RDS")
## Bin SALMAs with the Sub-Epochs they most overlap with -----------------------
binning <- palaeoverse::bin_time(occdf = data.frame(max_ma = SALMA_EOT$max_ma,
min_ma = SALMA_EOT$min_ma),
bins = SubEpochs,
method = "majority")
SALMA_EOT_Sub_epoch <- sapply(X = binning$bin_assignment,
FUN = function(x){
return(SubEpochs$interval_name[which(SubEpochs$bin == x)])
})
SALMA_EOT <- SALMA_EOT %>% add_column(Sub_Epoch = SALMA_EOT_Sub_epoch,
.after = "epoch")
## Subset occ associated to a SALMA --------------------------------------------
#(Re)create Early/Late stage column
split_stage <- function(stage, early=TRUE){
hyphen_split <- strsplit(stage, split = "-")[[1]]
if(early == TRUE){
return(hyphen_split[1])
}
else{
if(length(hyphen_split) > 1){
return(hyphen_split[2])
}
else{
return(NA)
}
}
}
species_list <- species_list %>% add_column(Early_stage = sapply(X = species_list$stage,
FUN = split_stage),
Late_stage = sapply(X = species_list$stage,
FUN = split_stage,
early = FALSE),
.after = "stage")
#Split SALMA-associated occurrences
spl_EOT <- species_list %>% filter(Early_stage %in% SALMA_EOT$interval_name)
message(paste0("A total of ", nrow(spl_EOT), " occurrences (representing ",
round( (nrow(spl_EOT) / nrow(species_list)), digits = 2 )*100,
"% of the total) are associated to a SALMA."))
get_ref <- function(stage, Which=c("min", "max")){
#get the ref age
hyp_split <- strsplit(stage, split = "-")[[1]]
if(length(hyp_split) > 1){
corr_early <- SALMA_EOT$Sub_Epoch[which(SALMA_EOT$interval_name == hyp_split[1])]
corr_late <- SALMA_EOT$Sub_Epoch[which(SALMA_EOT$interval_name == hyp_split[2])]
ref_max <- SubEpochs$max_ma[which(SubEpochs$interval_name == corr_early)]
ref_min <- SubEpochs$min_ma[which(SubEpochs$interval_name == corr_late)]
}
else{
corr <- SALMA_EOT$Sub_Epoch[which(SALMA_EOT$interval_name == stage)]
ref_max <- SubEpochs$max_ma[which(SubEpochs$interval_name == corr)]
ref_min <- SubEpochs$min_ma[which(SubEpochs$interval_name == corr)]
}
#return
if(Which == "min"){
return(ref_min)
}
else{
return(ref_max)
}
}
spl_EOT$min_ma <- sapply(X = spl_EOT$stage, FUN = get_ref, Which = "min")
spl_EOT$max_ma <- sapply(X = spl_EOT$stage, FUN = get_ref, Which = "max")
## Merge the two datasets (SALMA/not_SALMA) and save ---------------------------
spl_not_EOT <- species_list %>% filter(Early_stage %in% SALMA_EOT$interval_name == FALSE)
spl <- rbind.data.frame(spl_not_EOT, spl_EOT)
spl <- spl %>%
select(-c(Early_stage, Late_stage)) %>%
arrange(order, family, genus, accepted_name, cc)
library(readxl)
library(tidyverse)
library(palaeoverse)
## Load data -------------------------------------------------------------------
SubEpochs <- read_xlsx("./data_2023/time_bins/EarlyMidLate_epochs.xlsx")
SubEpochs$bin <- 1:nrow(SubEpochs) #add 'bin' columns for `bin_time`
SALMA_EOT <- read_xlsx("./data_2023/time_bins/SALMA_EOT.xlsx")
species_list <- readRDS("./data_2023/SPECIES_LISTS/5-Fully_cleaned_EOT_SA_Mammals_SALMA_kept_Tropics_Diet.RDS")
## Bin SALMAs with the Sub-Epochs they most overlap with -----------------------
binning <- palaeoverse::bin_time(occdf = data.frame(max_ma = SALMA_EOT$max_ma,
min_ma = SALMA_EOT$min_ma),
bins = SubEpochs,
method = "majority")
SALMA_EOT_Sub_epoch <- sapply(X = binning$bin_assignment,
FUN = function(x){
return(SubEpochs$interval_name[which(SubEpochs$bin == x)])
})
SALMA_EOT <- SALMA_EOT %>% add_column(Sub_Epoch = SALMA_EOT_Sub_epoch,
.after = "epoch")
## Subset occ associated to a SALMA --------------------------------------------
#(Re)create Early/Late stage column
split_stage <- function(stage, early=TRUE){
hyphen_split <- strsplit(stage, split = "-")[[1]]
if(early == TRUE){
return(hyphen_split[1])
}
else{
if(length(hyphen_split) > 1){
return(hyphen_split[2])
}
else{
return(NA)
}
}
}
species_list <- species_list %>% add_column(Early_stage = sapply(X = species_list$stage,
FUN = split_stage),
Late_stage = sapply(X = species_list$stage,
FUN = split_stage,
early = FALSE),
.after = "stage")
#Split SALMA-associated occurrences
spl_EOT <- species_list %>% filter(Early_stage %in% SALMA_EOT$interval_name)
message(paste0("A total of ", nrow(spl_EOT), " occurrences (representing ",
round( (nrow(spl_EOT) / nrow(species_list)), digits = 2 )*100,
"% of the total) are associated to a SALMA."))
get_ref <- function(stage, Which=c("min", "max")){
#get the ref age
hyp_split <- strsplit(stage, split = "-")[[1]]
if(length(hyp_split) > 1){
corr_early <- SALMA_EOT$Sub_Epoch[which(SALMA_EOT$interval_name == hyp_split[1])]
corr_late <- SALMA_EOT$Sub_Epoch[which(SALMA_EOT$interval_name == hyp_split[2])]
ref_max <- SubEpochs$max_ma[which(SubEpochs$interval_name == corr_early)]
ref_min <- SubEpochs$min_ma[which(SubEpochs$interval_name == corr_late)]
}
else{
corr <- SALMA_EOT$Sub_Epoch[which(SALMA_EOT$interval_name == stage)]
ref_max <- SubEpochs$max_ma[which(SubEpochs$interval_name == corr)]
ref_min <- SubEpochs$min_ma[which(SubEpochs$interval_name == corr)]
}
#return
if(Which == "min"){
return(ref_min)
}
else{
return(ref_max)
}
}
spl_EOT$min_ma <- sapply(X = spl_EOT$stage, FUN = get_ref, Which = "min")
spl_EOT$max_ma <- sapply(X = spl_EOT$stage, FUN = get_ref, Which = "max")
## Merge the two datasets (SALMA/not_SALMA) and save ---------------------------
spl_not_EOT <- species_list %>% filter(Early_stage %in% SALMA_EOT$interval_name == FALSE)
spl <- rbind.data.frame(spl_not_EOT, spl_EOT)
spl <- spl %>%
select(-c(Early_stage, Late_stage)) %>%
arrange(order, family, genus, accepted_name, cc)
library(dplyr)
spl <- spl %>%
select(-c(Early_stage, Late_stage)) %>%
arrange(order, family, genus, accepted_name, cc)
spl <- data.frame(spl)
spl <- spl %>%
select(-c(Early_stage, Late_stage)) %>%
arrange(order, family, genus, accepted_name, cc)
rm(list = ls())
library(readxl)
library(tidyverse)
library(palaeoverse)
## Load data -------------------------------------------------------------------
SubEpochs <- read_xlsx("./data_2023/time_bins/EarlyMidLate_epochs.xlsx")
SubEpochs$bin <- 1:nrow(SubEpochs) #add 'bin' columns for `bin_time`
SALMA_EOT <- read_xlsx("./data_2023/time_bins/SALMA_EOT.xlsx")
species_list <- readRDS("./data_2023/SPECIES_LISTS/5-Fully_cleaned_EOT_SA_Mammals_SALMA_kept_Tropics_Diet.RDS")
## Bin SALMAs with the Sub-Epochs they most overlap with -----------------------
binning <- palaeoverse::bin_time(occdf = data.frame(max_ma = SALMA_EOT$max_ma,
min_ma = SALMA_EOT$min_ma),
bins = SubEpochs,
method = "majority")
SALMA_EOT_Sub_epoch <- sapply(X = binning$bin_assignment,
FUN = function(x){
return(SubEpochs$interval_name[which(SubEpochs$bin == x)])
})
SALMA_EOT <- SALMA_EOT %>% add_column(Sub_Epoch = SALMA_EOT_Sub_epoch,
.after = "epoch")
## Subset occ associated to a SALMA --------------------------------------------
#(Re)create Early/Late stage column
split_stage <- function(stage, early=TRUE){
hyphen_split <- strsplit(stage, split = "-")[[1]]
if(early == TRUE){
return(hyphen_split[1])
}
else{
if(length(hyphen_split) > 1){
return(hyphen_split[2])
}
else{
return(NA)
}
}
}
species_list <- species_list %>% add_column(Early_stage = sapply(X = species_list$stage,
FUN = split_stage),
Late_stage = sapply(X = species_list$stage,
FUN = split_stage,
early = FALSE),
.after = "stage")
#Split SALMA-associated occurrences
spl_EOT <- species_list %>% filter(Early_stage %in% SALMA_EOT$interval_name)
message(paste0("A total of ", nrow(spl_EOT), " occurrences (representing ",
round( (nrow(spl_EOT) / nrow(species_list)), digits = 2 )*100,
"% of the total) are associated to a SALMA."))
get_ref <- function(stage, Which=c("min", "max")){
#get the ref age
hyp_split <- strsplit(stage, split = "-")[[1]]
if(length(hyp_split) > 1){
corr_early <- SALMA_EOT$Sub_Epoch[which(SALMA_EOT$interval_name == hyp_split[1])]
corr_late <- SALMA_EOT$Sub_Epoch[which(SALMA_EOT$interval_name == hyp_split[2])]
ref_max <- SubEpochs$max_ma[which(SubEpochs$interval_name == corr_early)]
ref_min <- SubEpochs$min_ma[which(SubEpochs$interval_name == corr_late)]
}
else{
corr <- SALMA_EOT$Sub_Epoch[which(SALMA_EOT$interval_name == stage)]
ref_max <- SubEpochs$max_ma[which(SubEpochs$interval_name == corr)]
ref_min <- SubEpochs$min_ma[which(SubEpochs$interval_name == corr)]
}
#return
if(Which == "min"){
return(ref_min)
}
else{
return(ref_max)
}
}
spl_EOT$min_ma <- sapply(X = spl_EOT$stage, FUN = get_ref, Which = "min")
spl_EOT$max_ma <- sapply(X = spl_EOT$stage, FUN = get_ref, Which = "max")
## Merge the two datasets (SALMA/not_SALMA) and save ---------------------------
spl_not_EOT <- species_list %>% filter(Early_stage %in% SALMA_EOT$interval_name == FALSE)
spl <- rbind.data.frame(spl_not_EOT, spl_EOT)
spl <- data.frame(spl)
spl <- spl %>%
select(-c(Early_stage, Late_stage)) %>%
arrange(order, family, genus, accepted_name, cc)
saveRDS(spl, "./data_2023/SPECIES_LISTS/6-Fully_cleaned_EOT_SA_Mammals_SALMA_smoothed.RDS")
source("../../pyrate_utilities.R")
rm(list = ls())
## SALMA kept ------------------------------------------------------------------
occdf <- readRDS("./data_2023/SPECIES_LISTS/5-Fully_cleaned_EOT_SA_Mammals_SALMA_kept_Tropics_Diet.RDS")
## Silvestro et al. (2014) accessory functions ---------------------------------
source("../../pyrate_utilities.R")
rm(list = ls())
