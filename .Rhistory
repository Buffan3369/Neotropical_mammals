# Author: Lucas Buffan
# Contact: lucas.l.buffan@gmail.com
# Aim: Script for rates through time panel inferred with BDCS (4 treatments:
#     SALMA_kept/smoothed and rate shifts per epochs/5My bins)
################################################################################
## Load accessory functions and packages ---------------------------------------
source("~/Documents/GitHub/CorsaiR/R/1-extract_param_from_PyRate_outputs.R")
source("~/Documents/GitHub/CorsaiR/R/2-plotting_facilities.R")
library("readxl")
library("ggpubr")
## Specify geoscales -----------------------------------------------------------
# Sub-epochs
gsc2 <- read_xlsx("./data_2023/time_bins/EarlyMidLate_epochs.xlsx")
gsc2 <- gsc2 %>% rename(min_age = "min_ma", max_age = "max_ma", name = "interval_name")
# SALMAs
gsc3 <- read_xlsx("./data_2023/time_bins/SALMA_EOT.xlsx")
gsc3 <- gsc3 %>%
rename(min_age = "min_ma", max_age = "max_ma", name = "interval_name") %>%
mutate(min_age = sapply(min_age, as.numeric), max_age = sapply(max_age, as.numeric))
## Loop across the 4 treatments ------------------------------------------------
paths <- c("./results_EXTENDED/SALMA_smoothed/genus_level/1-Full/BDS/",
"./results_EXTENDED/SALMA_smoothed/genus_level/1-Full/BDS_5M/",
"./results_EXTENDED/SALMA_kept/genus_level/1-Full/BDS/",
"./results_EXTENDED/SALMA_kept/genus_level/1-Full/BDS_5M/")
list_plots <- list()
i <- 1
for(pth in paths){
# specify second geoscale
spl <- strsplit(pth, split = "/")[[1]]
if(spl[3] == "SALMA_smoothed"){
geoscale2 <- gsc2
}
else if(spl[3] == "SALMA_kept"){
geoscale2 <- gsc3
}
# specify bins used for constrained rate shifts
if(i %% 2 == 0){
bins <- "5M"
}
else{
bins <- "epochs"
}
# open rtt table
rtt_tbl <- extract_rtt(path = paste0(
pth, "combined_logs/",
list.files(paste0(pth, "combined_logs/"), pattern = '_RTT.r')
),
ana = "BDS")
# restrict plotting window
rtt_tbl <- rtt_tbl %>% filter(time > 24 & time <= 52)
# adjustments for plotting window
rtt_tbl$time[1] <- 24
rtt_tbl$time[nrow(rtt_tbl)] <- 52
# plotting aesthetics
x_lab <- "Time (Ma)"
x.axis <- TRUE
xlim <- NULL
display_gts <- TRUE
# plot
rtt_plt <- rtt_plot(data = rtt_tbl,
type = "SpEx",
y_limits = c(0, 0.45),
x_lab = x_lab,
stage_x_breaks = FALSE,
manual_x_breaks = seq(25, 50, 5),
main = paste0(spl[3], "_", bins),
axes.labelsize=15,
ticks.labelsize = 12,
restrict_y = TRUE,
restrict_thr = 0.45,
ori_col="#08519c",
ext_col="#a50f15",
display_gts = display_gts,
xlim = xlim,
plot.border = FALSE,
x.axis = x.axis,
display_EECO_MECO = TRUE,
several_gts = TRUE,
geoscale2 = geoscale2,
geoscale_height = unit(1, "line"),
abbr = list(TRUE, FALSE)) +
# Temporal bands
annotate(geom = "rect", xmin = 47.8, xmax = Inf, fill = "grey10", ymin = -Inf, ymax = Inf, alpha = 0.1, linewidth = 0) +
annotate(geom = "rect", xmin = 33.9, xmax = 37.71, fill = "grey10", ymin = -Inf, ymax = Inf, alpha = 0.1, linewidth = 0) +
annotate(geom = "rect", xmin = -Inf, xmax = 27.8, fill = "grey10", ymin = -Inf, ymax = Inf, alpha = 0.1, linewidth = 0) +
# EOT line
geom_vline(xintercept = 33.9, linetype="dashed", color = "red", linewidth = 0.8) # EOT
if(i == 1){
rtt_plt <- rtt_plt +
annotate(geom = "segment", x = 47, xend = 50, y = 0.4, yend = 0.4, colour = "#08519c", linewidth = 1) +
annotate(geom = "text", x = 43, y = 0.4, label = "Origination rate", size = 5) +
annotate(geom = "segment", x = 47, xend = 50, y = 0.37, yend = 0.37, colour = "#a50f15", linewidth = 1) +
annotate(geom = "text", x = 43, y = 0.37, label = "Extinction rate ", size = 5)
}
## Add to plot list
list_plots[[i]] <- rtt_plt
i <- i+1
}
## Assemble and save -----------------------------------------------------------
tot <-  ggarrange(plotlist = list_plots, nrow = 2, ncol = 2)
ggsave("./figures/supp_figs/rtt_BDCS.pdf", height = 300, width = 350, units = "mm")
ggsave("./figures/supp_figs/rtt_BDCS.png", height = 300, width = 350, units = "mm", dpi = 600)
View(rtt_tbl)
source("./R/useful/helper_functions.R")
source("./R/useful/helper_functions.R")
## Function to select the closest 'age_vect' element to the integer 'int_age' --------------------------------------
select_closer <- function(int_age, age_vect){
diff <- sapply(X = age_vect, FUN = function(x){return(abs(x-int_age))})
return(which.min(diff))
}
age_vect <- plant_raw$Age
## Plant diversity (from Jaramillo et al. (2006)) -------------------------------------------------------------------
plant_raw <- read.table("./data_2023/MBD/raw_environment_correlates/Cnz_Plant_diversity_Jaramillo_2006.txt", header = TRUE)
selected_indices <- sapply(X = seq(from = 23, to = 56, by = 0.5),
FUN = select_closer,
age_vect = plant_raw$Age)
selected_indices <- sapply(X = seq(from = 15, to = 66, by = 0.5),
FUN = select_closer,
age_vect = plant_raw$Age)
plant_processed <- data.frame(Age = seq(from = 15, to = 66, by = 0.5),
Plant_diversity = plant_raw$Div[selected_indices])
par(mfrow = c(1,2))
plot(x = plant_processed$Age, plant_processed$Plant_diversity)
plot(x = plt$Age, y = plt$Div)
plot(x = plant_raw$Age, y = plant_raw$Div)
### Verification ###
par(mfrow = c(1,2))
plot(x = plant_processed$Age, plant_processed$Plant_diversity, xlim = c(15, 90))
plot(x = plant_raw$Age, y = plant_raw$Div)
write.table.lucas(x = plant_processed,
file = "./data_2023/MBD/processed_predictors_EXTENDED/1-Cenozoic_Plant_Diversity_500ky_step.txt")
## Andean Uplift (from Boschman (2021)) -----------------------------------------------------------------------------
Uplift <- read.table("./data_2023/MBD/raw_environment_correlates/andean_uplift/Andes_mean_elevations_no_basins_ALL.txt",
sep = " ",
header = TRUE)
#Write and save a dataset of the covariate with a 100ky time step
average_elevation <- data.frame(Age = 0:66,
Altitude = sapply(X = 0:66, FUN = function(x){return(mean(Uplift$Altitude[which(Uplift$Age == x)]))}))
interpol_av_el <- approx(x = average_elevation$Age[1:2], y = average_elevation$Altitude[1:2], n=3)$y
for(i in 2:66){
interpol_av_el <- c(interpol_av_el,
approx(x = average_elevation$Age[i:(i+1)], y = average_elevation$Altitude[i:(i+1)], n=3)$y[-c(1)])
}
par(mfrow = c(1,2))
plot(x = average_elevation$Age, y = average_elevation$Altitude)
title("Original data")
plot(x = seq(from = 0, to = 66, by = 0.1), y = interpol_av_el)
plot(x = seq(from = 0, to = 66, by = 0.5), y = interpol_av_el)
title("Interpolated data")
### Verification ###
# par(mfrow = c(1,2))
# plot(x = average_elevation$Age, y = average_elevation$Altitude)
# title("Original data")
# plot(x = seq(from = 0, to = 66, by = 0.5), y = interpol_av_el)
# title("Interpolated data")
write.table.lucas(data.frame(Age = seq(from = 0, to = 66, by = 0.5),
Altitude = interpol_av_el),
file = "./data_2023/MBD/processed_predictors_EXTENDED/2-Andes_mean_elevations_no_basins_500ky_step.txt")
## Palaeotemperature (assembled by Boschman and Condamine 2022 using Cenozoic data from Westerhold et al. 2020) ----------------
Temp <- read.table("./data_2023/MBD/raw_environment_correlates/palaeotemperature/merged_veizer_westerhold_Ts.txt",
sep = "\t",
header = TRUE)
Temp_Cnz <- Temp[which(Temp$Age <= 66), ]
## Palaeotemperature (assembled by Boschman and Condamine 2022 using Cenozoic data from Westerhold et al. 2020) ----------------
Temp <- read.table("./data_2023/MBD/raw_environment_correlates/palaeotemperature/merged_veizer_westerhold_Ts.txt",
sep = "\t",
header = TRUE)
Temp_Cnz <- Temp[which(Temp$Age <= 66), ]
#Write and save a dataset of the covariate with a 500ky time step
selected_indices <- sapply(X = seq(from = 0, to = 66, by = 0.5), FUN = select_closer, age_vect = Temp_Cnz$Age)
Temp_Cnz <- Temp_Cnz[selected_indices, ]
Temp_Cnz$Age <- sapply(X = Temp_Cnz$Age, FUN = round, digits = 1)
## Palaeotemperature (assembled by Boschman and Condamine 2022 using Cenozoic data from Westerhold et al. 2020) ----------------
Temp <- read.table("./data_2023/MBD/raw_environment_correlates/palaeotemperature/merged_veizer_westerhold_Ts.txt",
sep = "\t",
header = TRUE)
Temp_Cnz <- Temp[which(Temp$Age <= 66), ]
rm(Temp)
## Palaeotemperature (assembled by Boschman and Condamine 2022 using Cenozoic data from Westerhold et al. 2020) ----------------
Temp_Cnz <- read.table("./data_2023/MBD/raw_environment_correlates/palaeotemperature/merged_veizer_westerhold_Ts.txt",
sep = "\t",
header = TRUE)
Temp_Cnz <- Temp_Cnz[which(Temp$Age <= 66), ]
Temp_Cnz <- Temp_Cnz[which(Temp_Cnz$Age <= 66), ]
#Write and save a dataset of the covariate with a 500ky time step
selected_indices <- sapply(X = seq(from = 0, to = 66, by = 0.5), FUN = select_closer, age_vect = Temp_Cnz$Age)
Temp_Cnz1 <- Temp_Cnz[selected_indices, ]
Temp_Cnz1$Age <- sapply(X = Temp_Cnz1$Age, FUN = round, digits = 1)
### Verification ###
par(mfrow = c(1,2))
plot(x = Temp_Cnz$Age, y = Temp_Cnz$Temperature)
title("Original data")
plot(x = Temp_Cnz1$Age, y = Temp_Cnz1$Temperature)
title("Subsampled data")
write.table.lucas(Temp_Cnz,
file = "./data_2023/MBD/processed_predictors_EXTENDED/3-Cenozoic_Temp_500ky_step.txt",
sep = "\t")
write.table.lucas(Temp_Cnz,
file = "./data_2023/MBD/processed_predictors_EXTENDED/3-Cenozoic_Temp_500ky_step.txt")
## Delta 13 C (from Westerhold et al. 2020) ------------------------------------------------------------------------------------
full_data <- read.table("./data_2023/MBD/raw_environment_correlates/atmospheric_carbon_d13C/Westerhold-etal_2020/datasets/TableS33.tab",
sep = "\t",
fill = TRUE,
header = TRUE)
#Write and save a dataset of the covariate with a 500ky time step
selected_indices <- sapply(X = seq(0, 66, 0.5), FUN = select_closer, age_vect = full_data$Tuned.time..Ma.)
d13_C <- data.frame(Age = seq(0, 66, 0.5),
d13C_atmospheric = full_data$Foram.benth.Î´13C....PDB...VPDB.CorrAdjusted.[selected_indices])
write.table.lucas(x = d13_C,
file = "./data_2023/MBD/processed_predictors_EXTENDED/4-Atmospheric_delta13_C_500ky_step.txt")
## Organic d13C from Falkowski et al. (2005) and Katz et al. (2005) -------------------------------------------------------------
d13C_org <- read.table("./data_2023/MBD/raw_environment_correlates/organic_carbon/organic_carbon.txt",
sep = "\t",
fill = TRUE,
header = TRUE)
d13C_org <- d13C_org[-which(d13C_org$Age > 66.15),]
#interpolate every 10ky
interpolated <- data.frame(Age = c(NA), C13organic = c(NA))
interpolated <- data.frame(Age = c(NA), C13organic = c(NA))
for(t in seq(from = 0, to = 66.15, by = 0.01)){
if(t %in% d13C_org$Age){
ind <- which(d13C_org$Age == t)
interpolated <- rbind(interpolated,
d13C_org[ind,])
}
else{
interpolated <- rbind(interpolated,
c(t, NA))
}
}
interpolated <- interpolated[-c(1),]
row.names(interpolated) <- 1:nrow(interpolated)
i = 1
while(i < nrow(interpolated-1)){
if(is.na(interpolated$C13organic[i])){ #i is the first na postition
D = 0
while(is.na(interpolated$C13organic[i+D])){
D = D+1
}
interpolated$C13organic[i:(i+D-1)] <- approx(x = c(interpolated$Age[(i-1)], interpolated$Age[(i+D)]),
y = c(interpolated$C13organic[(i-1)], interpolated$C13organic[(i+D)]),
n = D)$y
i = i+D
}
else{
i = i+1
}
}
#now downscale at a 500ky resolution
selected_indices <- 100 * seq(from = 0, to = 66, by = 0.5) + 1
colnames(interpolated) <- c("Age", "d13C_organic")
final <- interpolated[selected_indices,]
write.table(x = final,
file = "./data_2023/MBD/processed_predictors_EXTENDED/5-organic_carbon_500ky_step.txt")
### Verification ###
par(mfrow = c(1,2))
plot(x = d13C_org$Age, y = d13C_org$C13organic)
title("Original data")
plot(x = final$Age, y = final$d13C_organic)
title("Interpolated data")
### Verification ###
par(mfrow = c(1,2))
plot(x = d13C_org$Age, y = d13C_org$C13organic)
title("Original data")
plot(x = final$Age, y = final$d13C_organic)
title("Scaled data")
### Verification ###
# par(mfrow = c(1,2))
# plot(x = d13C_org$Age, y = d13C_org$C13organic)
# title("Original data")
# plot(x = final$Age, y = final$d13C_organic)
# title("Scaled data")
write.table.lucas(x = final,
file = "./data_2023/MBD/processed_predictors_EXTENDED/5-organic_carbon_500ky_step.txt")
## Global sea level (from Miller et al. 2020) -----------------------------------------------------------------------------------
sea_lvl <- read.table("./data_2023/MBD/raw_environment_correlates/sea_level/Miller_2020_sea_level_data.txt",
sep = "\t",
header = TRUE)
## Global sea level (from Miller et al. 2020) -----------------------------------------------------------------------------------
sea_lvl <- read.table("./data_2023/MBD/raw_environment_correlates/sea_level/Miller_2020_sea_level_data.txt",
sep = "\t",
header = TRUE)
sea_lvl$age_calkaBP <- sapply(X = sea_lvl$age_calkaBP, FUN = function(x){x/1000})
selected_indices <- sapply(X = seq(from = 0, to = 66, by = 0.5), FUN = select_closer, age_vect = sea_lvl$age_calkaBP)
#there are some intervals with lacks => interpolate
ages <- sapply(X = sea_lvl$age_calkaBP[selected_indices], FUN = round, digits = 1)
sel_sea_lvl <- sea_lvl$sealevel[selected_indices]
to_add <- seq(0,66,0.5)[which(seq(0,66,0.5) %in% ages == FALSE)]
for(pos in rev(to_add)){
n_add <- 1
n_add_left <- 0
n_add_right <- 0
bf <- pos + 0.5
af <- pos - 0.5
if(bf %in% ages == FALSE){
bf <- bf + 0.5
n_add_right <- 1
while(bf %in% ages == FALSE){
bf <- bf + 0.5
n_add_right <- n_add_right + 1
}
n_add <- n_add + n_add_right
}
if(af %in% ages == FALSE){
af <- af - 0.5
n_add_left <- 1
while(af %in% ages == FALSE){
af <- af - 0.5
n_add_left <- n_add_left + 1
}
n_add <- n_add + n_add_left
}
interpol <- approx(x = ages[which(ages == af):which(ages == bf)],
sel_sea_lvl[which(ages == af):which(ages == bf)],
n = n_add+2)$y
if((n_add_left == 0) & (n_add_right != 0)){
sel_sea_lvl <- append(sel_sea_lvl, values = to_add[(length(to_add)-1)], after = which(ages == af))
}
else {
sel_sea_lvl <- append(sel_sea_lvl, values = to_add[2], after = which(ages == bf))
}
}
## Global sea level (from Miller et al. 2020) -----------------------------------------------------------------------------------
sea_lvl <- read.table("./data_2023/MBD/raw_environment_correlates/sea_level/Miller_2020_sea_level_data.txt",
sep = "\t",
header = TRUE)
sea_lvl <- sea_lvl %>%
mutate(age_calkaBP = sapply(X = sea_lvl$age_calkaBP, FUN = function(x){x/1000})) %>%
rename(age_MaBP = "age_calkaBP")
library(tidyverse)
sea_lvl <- sea_lvl %>%
mutate(age_calkaBP = sapply(X = sea_lvl$age_calkaBP, FUN = function(x){x/1000})) %>%
rename(age_MaBP = "age_calkaBP")
## Global sea level (from Miller et al. 2020) -----------------------------------------------------------------------------------
sea_lvl <- read.table("./data_2023/MBD/raw_environment_correlates/sea_level/Miller_2020_sea_level_data.txt",
sep = "\t",
header = TRUE)
sea_lvl <- sea_lvl %>%
mutate(age_calkaBP = sapply(X = sea_lvl$age_calkaBP, FUN = function(x){x/1000})) %>%
rename(age_MaBP = "age_calkaBP")
selected_indices <- sapply(X = seq(from = 0, to = 66, by = 0.5), FUN = select_closer, age_vect = sea_lvl$age_MaBP)
#there are some intervals with lacks => interpolate
ages <- sapply(X = sea_lvl$age_MaBP[selected_indices], FUN = round, digits = 1)
sel_sea_lvl <- sea_lvl$sealevel[selected_indices]
to_add <- seq(0,66,0.5)[which(seq(0,66,0.5) %in% ages == FALSE)]
for(pos in rev(to_add)){
n_add <- 1
n_add_left <- 0
n_add_right <- 0
bf <- pos + 0.5
af <- pos - 0.5
if(bf %in% ages == FALSE){
bf <- bf + 0.5
n_add_right <- 1
while(bf %in% ages == FALSE){
bf <- bf + 0.5
n_add_right <- n_add_right + 1
}
n_add <- n_add + n_add_right
}
if(af %in% ages == FALSE){
af <- af - 0.5
n_add_left <- 1
while(af %in% ages == FALSE){
af <- af - 0.5
n_add_left <- n_add_left + 1
}
n_add <- n_add + n_add_left
}
interpol <- approx(x = ages[which(ages == af):which(ages == bf)],
sel_sea_lvl[which(ages == af):which(ages == bf)],
n = n_add+2)$y
if((n_add_left == 0) & (n_add_right != 0)){
sel_sea_lvl <- append(sel_sea_lvl, values = to_add[(length(to_add)-1)], after = which(ages == af))
}
else {
sel_sea_lvl <- append(sel_sea_lvl, values = to_add[2], after = which(ages == bf))
}
}
### Verification ###
par(mfrow = c(1,2))
plot(x = sea_lvl$age_MaBP, y = sea_lvl$sealevel)
title("Original data")
plot(x = seq(from = 0, to = 66, by = .5), y = sel_sea_lvl)
title("Scaled data")
length(seq(from = 0, to = 66, by = .5))
## Global sea level (from Miller et al. 2020) -----------------------------------------------------------------------------------
sea_lvl <- read.table("./data_2023/MBD/raw_environment_correlates/sea_level/Miller_2020_sea_level_data.txt",
sep = "\t",
header = TRUE)
sea_lvl <- sea_lvl %>%
mutate(age_calkaBP = sapply(X = sea_lvl$age_calkaBP, FUN = function(x){x/1000})) %>%
rename(age_MaBP = "age_calkaBP")
selected_indices <- sapply(X = seq(from = 0, to = 66, by = 0.5), FUN = select_closer, age_vect = sea_lvl$age_MaBP)
#there are some intervals with lacks => interpolate
ages <- sapply(X = sea_lvl$age_MaBP[selected_indices], FUN = round, digits = 1)
sel_sea_lvl <- sea_lvl$sealevel[selected_indices]
plot(x = ages, y = sel_sea_lvl)
title("Scaled data")
length(seq(0,66,0.5)[which(seq(0,66,0.5) %in% ages == FALSE)])
View(data.frame(ages, sel_sea_lvl))
i = select_closer(int_age = c(0, 0.5, 1), age_vect = c(0.6))
missing <- seq(0,66,0.5)[which(seq(0,66,0.5) %in% ages == FALSE)] # ages
udc <- ages[which(ages %in% seq(from = 0, to = 66, by = 0.5) == FALSE)]
# replace udc by to_add
ages[which(ages %in% udc)] <- to_add
udc <- ages[which(ages %in% seq(0,66,0.5) == FALSE)]
## Global sea level (from Miller et al. 2020) -----------------------------------------------------------------------------------
sea_lvl <- read.table("./data_2023/MBD/raw_environment_correlates/sea_level/Miller_2020_sea_level_data.txt",
sep = "\t",
header = TRUE)
sea_lvl <- sea_lvl %>%
mutate(age_calkaBP = sapply(X = sea_lvl$age_calkaBP, FUN = function(x){x/1000})) %>%
rename(age_MaBP = "age_calkaBP")
selected_indices <- sapply(X = seq(from = 0, to = 66, by = 0.5), FUN = select_closer, age_vect = sea_lvl$age_MaBP)
#there are some intervals with lacks
ages <- sapply(X = sea_lvl$age_MaBP[selected_indices], FUN = round, digits = 1)
sel_sea_lvl <- sea_lvl$sealevel[selected_indices]
udc <- ages[which(ages %in% seq(0,66,0.5) == FALSE)]
to_add <- seq(0,66,0.5)[which(seq(0,66,0.5) %in% ages == FALSE)]
# replace udc by to_add
ages[which(ages %in% udc)] <- to_add
# dataframe
sea_level <- data.frame(Age = ages,
Sea_level = sel_sea_lvl)
# dataframe
slvl <- data.frame(Age = ages,
Sea_level = sel_sea_lvl)
rm(sea_level)
### Verification ###
par(mfrow = c(1,2))
plot(x = sea_lvl$age_MaBP, y = sea_lvl$sealevel)
title("Original data")
plot(x = slvl$Age, y = slvl$Sea_level)
title("Scaled data")
write.table.lucas(x = slvl,
file = "./data_2023/MBD/processed_predictors_EXTENDED/6-sea_level_500ky_step.txt")
rm(list = ls())
dev.off()
################################################################################
# Name: 6-Get_TsTe_order.R
# Author: Lucas Buffan
# Contact: lucas.l.buffan@gmail.com
# Aim: Extract Ts/Te corresponding to each order in the overall TsTe tables.
################################################################################
library(tidyverse)
source("./R/useful/helper_functions.R") # contains tax_dict and sp_to_udsc
# Reference database containing orders for each species/genus
occdf <- readRDS("./data_2023/SPECIES_LISTS/4-Fully_cleaned_Cnz_SA_mammals_SALMA_kept_Tropics_Diet.RDS")
occdf$accepted_name <- sapply(X = occdf$accepted_name, FUN = spc_to_udsc) #convert spaces to hyphens
occdf$genus <- sapply(X = occdf$genus, FUN = spc_to_udsc)
# Taxon lists in species and genus-level analyses
sp_ref <- read.table("./data_2023/PyRate/EXTENDED/SALMA_kept/species_level/1-Full/Full_EOT_sp_occ_SALMA_kept_TaxonList.txt", header = TRUE)
sp_ref$order <- sapply(X = sp_ref$Species, FUN = function(x){unique(occdf$order[which(occdf$accepted_name == x)])})
gen_ref <- read.table("./data_2023/PyRate/EXTENDED/SALMA_kept/genus_level/1-Full/Full_EOT_gen_occ_SALMA_kept_TaxonList.txt", header = TRUE)
gen_ref$order <- sapply(X = gen_ref$Species, FUN = function(x){unique(occdf$order[which(occdf$genus == x)])})
# Loop across the four outputs
for(salma in c("SALMA_smoothed")){
for(lvl in c("species_level")){
# choose reference
if(lvl == "species_level"){
ref <- sp_ref
}
else{
ref <- gen_ref
}
# open corresponding TsTe file
tste_dir <- paste0("./results_EXTENDED/", salma, "/", lvl, "/1-Full/MH_sampler/LTT/")
tste <- list.files(path = tste_dir, pattern = "_se_est.txt")[1]
tste_ttl <- read.table(paste(tste_dir, tste, sep = "/"),
header = TRUE)
tste_ttl <- tste_ttl %>% add_column(tax = ref$order)
for(odr in keys(tax_dict)){
tmp_tste_odr <- tste_ttl %>%
filter(tax %in% values(tax_dict[odr])) %>%
select(!c("tax"))
write.table.lucas(file = paste0("./results_EXTENDED/", salma, "/", lvl, "/6-Order_level/", odr, "/BDCS/TsTe_", odr, "_", salma, "_", lvl, ".txt"),
x = tmp_tste_odr)
write.table.lucas(file = paste0("./results_EXTENDED/", salma, "/", lvl, "/6-Order_level/", odr, "/BDCS_5M/TsTe_", odr, "_", salma, "_", lvl, ".txt"),
x = tmp_tste_odr)
}
}
}
rm(list = ls())
library(divvy)
library(dplyr)
## Accessory functions ---------------------------------------------------------
source("~/PyRate/pyrate_utilities.r")
source("./R/useful/helper_functions.R")
## -----------------------------------------------------------------------------
## EXTENDED (i.e. Late Palaeocene + Eocene-Oligocene + Early Miocene) ----------
## -----------------------------------------------------------------------------
i <- 6
i <- i+1
occdf <- readRDS(paste0("./data_2023/SPECIES_LISTS/", i, "-Fully_cleaned_EOT_extended_SA_Mammals_", salma, "_Tropics_Diet.RDS"))
salma <- "SALMA_smoothed"
occdf <- readRDS(paste0("./data_2023/SPECIES_LISTS/", i, "-Fully_cleaned_EOT_extended_SA_Mammals_", salma, "_Tropics_Diet.RDS"))
salma <- "SALMA_kept"
occdf <- readRDS(paste0("./data_2023/SPECIES_LISTS/", i, "-Fully_cleaned_EOT_extended_SA_Mammals_", salma, "_Tropics_Diet.RDS"))
### Spatially scaled
#subset unique genera at a given age and place (characterised by p_lng, p_lat (nb. could have been present-day lon/lat))
gen_lvl_scaled <- occdf %>%
group_by(genus, gen_lvl_status, min_ma, max_ma, p_lng, p_lat, age) %>%
distinct(genus) %>%
ungroup() %>%
select(genus, gen_lvl_status, min_ma, max_ma) %>%
rename(Species = "genus", Status = "gen_lvl_status", min_age = "min_ma", max_age = "max_ma")
scale_attempt <- divvy::uniqify(occdf, xy = c("p_lng", "p_lat"))
View(scale_attempt)
scale_attempt <- divvy::uniqify(occdf, xy = c("p_lng", "p_lat"), taxVar = "genus")
View(scale_attempt)
View(gen_lvl_scaled)
